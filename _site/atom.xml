<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>tinyfisher blog</title>
 <link href="http://tinyfisher.github.com/" rel="self"/>
 <link href="http://tinyfisher.github.com"/>
 <updated>2013-09-24T09:25:43+08:00</updated>
 <id>http://tinyfisher.github.com</id>
 <author>
   <name>tinyfisher</name>
   <email>tinyfisher@foxmail.com</email>
 </author>

 
 <entry>
   <title>IBM Linux组电面总结</title>
   <link href="http://tinyfisher.github.com/blog/2013/09/22/ibm"/>
   <updated>2013-09-22T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/blog/2013/09/22/ibm</id>
   <content type="html">&lt;p&gt;下午四点多的突然接到IBM Linux电面，找了个安静的地方开始面试，对面GG比较友好，首先自我介绍，然后说了说项目，面试官还是很互动的，氛围比较轻松，还介绍了Linux组主要是做社区这一块，内核神马的。之后开始技术问题狂轰滥炸：&lt;/p&gt;

&lt;h4 id='1'&gt;&lt;strong&gt;1.大小端问题&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;这个才看过，总结下：小端是指低地址在低字节，正常比较容易理解的就是小端；大端是指高位在低字节，低位在高字节（比较绕）。。。&lt;br /&gt;举个例子：0x1234，如果是小端，假设左边是内存高位，右边是内存低位，则小端存储如下：0x12,0x34；反之大端则是：0x34，0x12&lt;/p&gt;

&lt;h4 id='2fork'&gt;&lt;strong&gt;2.fork特点&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;这个回答的还不错，fork会有两个返回值，返回值为0的为子进程，返回值不为0的为父进程，其数值含义是子进程的pid&lt;/p&gt;

&lt;h4 id='3'&gt;&lt;strong&gt;3.僵尸进程&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;这个答错了，面试官问“是这样吗”之后，我就知道答错了，记混淆了。&lt;br /&gt;&lt;strong&gt;我的错误回答：父进程比子进程先结束，子进程由init进程管理，子进程成为僵尸进程&lt;/strong&gt;&lt;br /&gt;错误原因：我混淆了孤儿进程和僵尸进程的概念，我说的其实是孤儿进程。那么什么是僵尸进程呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关于僵尸进程&lt;/strong&gt;&lt;br /&gt;&lt;strong&gt;1.僵尸进程是怎么产生的？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;由于子进程的结束和父进程的运行是一个异步过程,即父进程永远无法预测子进程到底什么时候结束. 那么会不会因为父进程太忙来不及wait子进程,或者说不知道子进程什么时候结束,而丢失子进程结束时的状态信息呢? 不会。因为UNIX提供了一种机制可以保证只要父进程想知道子进程结束时的状态信息，就可以得到。这种机制就是: &lt;strong&gt;在每个进程退出的时候,内核释放该进程所有的资源,包括打开的文件,占用的内存等。 但是仍然为其保留一定的信息(包括进程号the process ID,退出状态the termination status of the process,运行时间the amount of CPU time taken by the process等)。直到父进程通过wait / waitpid来取时才释放&lt;/strong&gt;. 但这样就导致了问题,如果进程不调用wait / waitpid的话, 那么保留的那段信息就不会释放,其进程号就会一直被占用,但是系统所能使用的进程号是有限的,如果大量的产生僵死进程,将因为没有可用的进程号而导致系统不能产生新的进程. 此即为僵尸进程的危害,应当避免。&lt;br /&gt;&lt;strong&gt;总结一下：一个子进程在其父进程还没有调用wait()或waitpid()的情况下退出。这个子进程就变成僵尸进程。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.僵尸进程的处理&lt;/strong&gt;&lt;br /&gt;任何一个子进程(init除外)在exit()之后，并非马上就消失掉，而是留下一个称为&lt;strong&gt;僵尸进程(Zombie)的数据结构&lt;/strong&gt;，等待父进程处理。这是每个子进程在结束时都要经过的阶段。如果子进程在exit()之后，父进程没有来得及处理，这时用ps命令就能看到子进程的状态是“Z”。如果父进程能及时 处理，可能用ps命令就来不及看到子进程的僵尸状态，但这并不等于子进程不经过僵尸状态。如果父进程在子进程结束之前退出，则子进程将由init接管。init将会以父进程的身份对僵尸状态的子进程进行处理。&lt;/p&gt;

&lt;h4 id='4git'&gt;4.git&lt;/h4&gt;

&lt;p&gt;面试关看我的博客是在github上写的，于是又问了我git的问题，git rebase是干什么用的？&lt;br /&gt;我知道git add，commit，push，pull，checkout，reset，还真没用过rebase。。。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;首先回顾一下git基本命令&lt;/strong&gt;&lt;br /&gt;git init 初始化代码仓库&lt;br /&gt;git add file 将工作目录里的file文件修改提交到本地暂存区&lt;br /&gt;git commit -m “commit” 将暂存区里的文件提交，备注“commit”，同时生成快照，就是一个hash值&lt;br /&gt;git checkout file 把file回滚到修改前的状态，注意这个针对还没有提交到本地暂存区的文件，即git add之前的文件 git reset HEAD file 把file从暂存区撤离，即git add 的反操作&lt;br /&gt;git revert &amp;lt;$id&amp;gt; 返回到commit id为&amp;lt;$id&amp;gt;的状态，本次也是一个动作，需要commit&lt;br /&gt;git reset &amp;#8211;hard HEAD~1 彻底回到倒数第二个commit，倒数第一个的commit会消失，文件内容也回到上个版本 git reset &amp;#8211;soft HEAD~1 将最后一个commit撤销，但文件内容没变，只需要重新commit即可 git diff 查看本地文件和暂存区文件差别 git log 查看commit记录&lt;br /&gt;git status 查看git文件暂存区状态 git pull 抓取远程仓库所有分支更新并合并到本地&lt;br /&gt;git push push所有分支到远程仓库 git push origin master 将本地主分支推到远程主分支&lt;br /&gt;git branch 显示所有分支&lt;br /&gt;git branch newbranch 创建分支&lt;br /&gt;git checkout branchname 切换到分支&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关于git rebase&lt;/strong&gt;&lt;br /&gt;下面这篇&lt;a href='http://gitbook.liuhui998.com/4_2.html'&gt;blog&lt;/a&gt;写的比较不错，之前没有多人开发git的经验，还是挺难理解的.&lt;/p&gt;

&lt;h4 id='5kmallocvmalloc'&gt;&lt;strong&gt;5.kmalloc和vmalloc区别&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;没用过，不知道，查了下：&lt;br /&gt;kmalloc和vmalloc是分配的是内核的内存,malloc分配的是用户的内存&lt;/p&gt;

&lt;p&gt;kmalloc保证分配的内存在物理上是连续的,vmalloc保证的是在虚拟地址空间上的连续&lt;/p&gt;

&lt;p&gt;kmalloc能分配的大小有限,vmalloc和malloc能分配的大小相对较大&lt;/p&gt;

&lt;p&gt;内存只有在要被DMA访问的时候才需要物理上连续，即kmalloc&lt;/p&gt;

&lt;p&gt;kmalloc和 kfree管理内核段内分配的内存，这是真实地址已知的实际物理内存块。vmalloc和vfree是对内核使用的虚拟内存进行分配和释放&lt;/p&gt;

&lt;h4 id='6malloc'&gt;&lt;strong&gt;6.malloc调用的系统调用&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;不知道，查了下是brk，参见这篇&lt;a href='http://edsionte.com/techblog/archives/4174'&gt;blog&lt;/a&gt;&lt;/p&gt;

&lt;h4 id='7fork'&gt;&lt;strong&gt;7.fork的优化&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;这个依然不知道，fork实现的时候并不是完全复制父进程的数据段和堆栈，而是采用了&lt;strong&gt;写时复制（copy-on-write）COW&lt;/strong&gt;技术。数据段和堆栈有父子进程共享，内核将他们的访问权限设为只读，父子进程中的任何一个试图修改这些区域，此时内核只为那些修改的区域的那块内存做一个副本，通常是一个page。&lt;/p&gt;

&lt;h4 id='8cc'&gt;8.C/C++遇到的坑&lt;/h4&gt;

&lt;p&gt;这个说了我之前遇到的链接错误，参见我的博文&lt;a href='http://tinyfisher.github.io/c/2012/11/23/makefile/'&gt;makefile 编写问题记录&lt;/a&gt;&lt;/p&gt;

&lt;h4 id='9ibmip'&gt;9.从IBM发ip包到北邮要查那些表，子网掩码干什么的？&lt;/h4&gt;

&lt;p&gt;这个知道，route表和arp表，子网掩码区分网络号和主机号，若网络号一致，表明在一个网段&lt;/p&gt;

&lt;h4 id='10gdb'&gt;10.gdb怎么调试段错误&lt;/h4&gt;

&lt;p&gt;没怎么用过，面试官说用backtrace&lt;/p&gt;

&lt;h4 id='11cpython'&gt;11.C和Python比较&lt;/h4&gt;

&lt;p&gt;水过，python方便，c执行效率高&lt;/p&gt;

&lt;h4 id='12'&gt;12.中断的上部和下部（没听过啊）&lt;/h4&gt;

&lt;p&gt;真不知道，听都没听过啊&lt;/p&gt;

&lt;h5 id='linux'&gt;总结：由于linux组做的都是驱动方面的，所以问的可能比较深，很多都没用过，没听过，估计悲剧，所以还是尽量深的去学习研究吧，不然怎么坑蒙拐骗面试官~&lt;/h5&gt;</content>
 </entry>
 
 <entry>
   <title>Mongodb学习整理之内存映射机制</title>
   <link href="http://tinyfisher.github.com/linux/2013/09/21/mongodb-mmp"/>
   <updated>2013-09-21T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/linux/2013/09/21/mongodb-mmp</id>
   <content type="html">&lt;p&gt;sql数据库在数据量达到百万级的时候性能直线下降，在建立索引的表上做一个条件查询甚至达到分钟级别查询时间，这是无法忍受的，瓶颈在于大量的磁盘i/o操作，而这些i/o操作无疑使很耗费时间的。mongodb之所以对海量数据的查询如此高效，是因为他使用了内存映射机制，避免了大量的磁盘i/o，从而大大提高了查询效率，但相应的对内存要求也比较高。ok，下面我们来看看什么是内存映射机制&lt;/p&gt;

&lt;h4 id='id27'&gt;官网的说法：&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;What are memory mapped files?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A memory-mapped file is a file with data that the operating system places in memory by way of the mmap() system call. mmap() thus maps the file to a region of virtual memory. Memory-mapped files are the critical piece of the storage engine in MongoDB. By using memory mapped files MongoDB can treat the contents of its data files as if they were in memory. This provides MongoDB with an extremely fast and simple method for accessing and manipulating data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do memory mapped files work?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Memory mapping assigns files to a block of virtual memory with a direct byte-for-byte correlation. Once mapped, the relationship between file and memory allows MongoDB to interact with the data in the file as if it were memory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How does MongoDB work with memory mapped files?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;MongoDB uses memory mapped files for managing and interacting with all data. MongoDB memory maps data files to memory as it accesses documents. Data that isn’t accessed is not mapped to memory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are page faults?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Page faults will occur if you’re attempting to access part of a memory-mapped file that isn’t in memory.&lt;/p&gt;

&lt;p&gt;If there is free memory, then the operating system can find the page on disk and load it to memory directly. However, if there is no free memory, the operating system must:&lt;/p&gt;

&lt;p&gt;find a page in memory that is stale or no longer needed, and write the page to disk.&lt;/p&gt;

&lt;p&gt;read the requested page from disk and load it into memory.&lt;/p&gt;

&lt;p&gt;This process, particularly on an active system can take a long time, particularly in comparison to reading a page that is already in memory.&lt;/p&gt;

&lt;h4 id='id28'&gt;我的理解：&lt;/h4&gt;

&lt;p&gt;首先，“映射”这个词，就和数学课上说的“一一映射”是一个意思，就是建立一种一一对应关系，在这里主要是只&lt;em&gt;硬盘上文件&lt;/em&gt;的位置与进程&lt;em&gt;逻辑地址空间&lt;/em&gt;中一块大小相同的区域之间的一一对应（按字节对应），如过程1所示。这种对应关系纯属是逻辑上的概念，物理上是不存在的，原因是进程的逻辑地址空间本身就是不存在的。在内存映射的过程中，&lt;strong&gt;并没有实际的数据拷贝，文件没有被载入内存，只是逻辑上被放入了内存&lt;/strong&gt;，这个过程由系统调用mmap()实现，所以建立内存映射的效率很高。&lt;/p&gt;

&lt;p&gt;&lt;img alt='hello' src='/assets/themes/images/yxh.gif' /&gt;&lt;br /&gt;既然建立内存映射没有进行实际的数据拷贝，那么进程又怎么能最终直接通过内存操作访问到硬盘上的文件呢？那就要看内存映射之后的几个相关的过程了。&lt;/p&gt;

&lt;p&gt;mmap()会返回一个指针ptr，它指向进程逻辑地址空间中的一个地址，这样以后，进程无需再调用read或write对文件进行读写，而只需要通过ptr就能够操作文件。但是ptr所指向的是一个逻辑地址，要操作其中的数据，必须通过内存管理单元MMU将逻辑地址转换成物理地址，如图1中过程2所示。这个过程与内存映射无关。&lt;/p&gt;

&lt;p&gt;前面讲过，建立内存映射并没有实际拷贝数据，这时，MMU在地址映射表中是无法找到与ptr相对应的物理地址的，也就是MMU失败，将产生一个缺页中断，缺页中断的中断响应函数会在swap中寻找相对应的页面，如果找不到（也就是该文件从来没有被读入内存的情况），则会通过mmap()建立的映射关系，从硬盘上将文件读取到物理内存中，如图1中过程3所示。这个过程与内存映射无关。&lt;/p&gt;

&lt;p&gt;如果在拷贝数据时，发现物理内存不够用，则会通过虚拟内存机制（swap）将暂时不用的物理页面交换到硬盘上，如图1中过程4所示。这个过程也与内存映射无关。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;所以当mongodb读取数据库文件的时候，首先做内存映射，读取文件变成了读取内存操作，所以mongodb的查询效率相当高，当然，如果你的内存不够大，经常发生缺页中断，那么效率会大打折扣了&lt;/strong&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>ICAP RFC3507 部分章节翻译</title>
   <link href="http://tinyfisher.github.com/blog/2013/09/21/icap"/>
   <updated>2013-09-21T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/blog/2013/09/21/icap</id>
   <content type="html">&lt;h4 id='icaphttprfc3507okicap'&gt;之前项目中用到了icap协议，成功实现了对http数据包的内容修改，增加等功能，现将一些协议中一些字段进行总结，参考了RFC3507，ok，让我们首先看一个icap报文&lt;/h4&gt;
&lt;pre class='prettyprint linenums lang-clj'&gt;
REQMOD  icap://127.0.0.1:1344/greasyspoon_req ICAP/1.0\r\n       
Host:127.0.0.1:1344\r\n                                     
Date:Wed, 08 May 2013 15:47:28 GMT\r\n                         
Encapsulated:req-hdr=0, null-body=336\r\n                                                      
Preview:0\r\n                                                    
Allow:204\r\n                               
\r\n                                     
GET   http://202.168.1.13/1.html HTTP/1.1\r\n                  
Host:   202.168.1.13\r\n                          
User-Agent:  Mozilla/5.0 (Windows NT 6.1; WOW64; rv:17.0) Gecko/20100101 
Firefox/17.0\r\n                        
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n  
Accept-Language:   en-US,en;q=0.5\r\n                  
Accept-Encoding:   gzip, deflate\r\n                    
Referer:  http://202.168.1.13/support.html\r\n                    
\r\n
&lt;/pre&gt;
&lt;p&gt;其中1到7行为icap头，剩下的是我们常见的http头，我们一条一条看一下：&lt;br /&gt;第一行中&lt;code&gt;REQMOD&lt;/code&gt;表示icap工作在请求模式，icap还有一种模式叫&lt;code&gt;RESPMOD&lt;/code&gt;，意思是工作在响应模式，&lt;strong&gt;简单的说，请求模式主要针对http请求报文进行匹配修改增值，响应模式主要针对http响应报文进行匹配修改增值&lt;/strong&gt;；&lt;code&gt;icap://127.0.0.1:1344/greasyspoon_req ICAP/1.0&lt;/code&gt;说的是资源url和版本号1.0，其中&lt;code&gt;greasyspoon&lt;/code&gt;是指icap服务器的具体名称，icap服务器还有c-icap等。&lt;br /&gt;&lt;code&gt;host&lt;/code&gt;和&lt;code&gt;date&lt;/code&gt;这里就不详细说了&lt;br /&gt;&lt;code&gt;Encapsulated:req-hdr=0, null-body=336\r\n &lt;/code&gt;说的是封装了http请求包，http头偏移量为0，这个请求包只有头，没有body，所以&lt;code&gt;null-body=336&lt;/code&gt;，336是指body的偏移量；如果有请求包的body的话,例如post消息，会出现下面的情况：&lt;br /&gt;&lt;code&gt;Encapsulated: req-hdr=0, req-body=412&lt;/code&gt;,意思是头偏移长度0，bdoy偏移长度为412，通过这个可以得到http头和消息体的开始位置，&lt;strong&gt;总结一下，&lt;code&gt;Encapsulated&lt;/code&gt;这个字段主要用来定位http消息的header和body。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;再来看&lt;code&gt;preview&lt;/code&gt;字段的用途，首先看一下RFC3507中对他的描述：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ICAP REQMOD or RESPMOD requests sent by the ICAP client to the ICAP server may include a &amp;quot;preview&amp;quot;. This feature allows an ICAP server to see the beginning of a transaction, then decide if it wants to opt-out of the transaction early instead of receiving the remainder of the request message.   &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;翻译如下：icap客户端发送给服务端的REQMOD或者RESPMOD请求可能包含“preview” 字段，它能让icap服务端看到事务的最开始的一些信息，从而决定是否直接退出这个事务，而不是等到将所有的请求信息接收完毕再做判断。&lt;strong&gt;说白了就是预览icap封装消息body的前n个字节，来判断是否对这个消息进行处理，而不是接收完所有消息再判断。&lt;/strong&gt;举个例子（RFC上的）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;If an ICAP server wants to transcode all GIF87 files into GIF89 files, then the GIF87 files could quickly be detected by looking at the first few body bytes of the file.  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;翻译：如果icap服务器想要把所有gif87的文件转码成gif89文件，gif87的文件可以通过body的前几行检测出来。&lt;/p&gt;

&lt;p&gt;这里由于我们的包里只有http header，没有http body，所以preview为0&lt;/p&gt;

&lt;p&gt;最后&lt;code&gt;Allow:204&lt;/code&gt;,我们先看看RFC上怎么说：&lt;br /&gt; An ICAP client MAY include &amp;#8220;Allow: 204&amp;#8221; in its request headers,indicating that the server MAY reply to the message with a &amp;#8220;204 NoContent&amp;#8221; response if the object does not need modification.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;If an ICAP server receives a request that does not have &amp;quot;Allow: 204&amp;quot;,it MUST NOT reply with a 204. In this case, an ICAP server MUST return the entire message back to the client, even though it is identical to the message it received.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;翻译：&amp;#8221;Allow: 204&amp;#8221;是可选的，加上这个选项表示：如果这个包不需要处理，则服务器返回&amp;#8221;204 NoContent&amp;#8221;给客户端，如果不加这个选项，服务器绝不会返回204，而是将整个消息返回给客户端&lt;br /&gt;&lt;strong&gt;总结一下：这个allow：204主要是真针对不需要处理的数据包进行简单返回状态码204，从而减少了icap服务器和客户端的工作量&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id='okicapicap'&gt;ok，到这里我们基本分析了icap的请求包，再来看看，icap服务器的返回包：&lt;/h4&gt;
&lt;pre class='prettyprint linenums lang-clj'&gt;
ICAP/1.0 200 OK\r\n 
ISTag:&quot;GreasySpoon-1.0.8-01&quot;\r\n                   
Host:0.0.0.0:1344\r\n                         
Encapsulated:req-hdr=0, null-body=333\r\n                 
Connection:close\r\n                          
\r\n                                     
GET http://202.168.2.34/2.html HTTP/1.1\r\n                 
Host:202.168.2.34\r\n                          
User-Agent:  Mozilla/5.0 (Windows NT 6.1; WOW64; rv:17.0) Gecko/20100101 
Firefox/17.0\r\n                         
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n     
Accept-Language:   en-US,en;q=0.5\r\n                   
Accept-Encoding:   gzip, deflate\r\n                     
Referer:http://202.168.1.13/support.html\r\n                   
\r\n                                     
&lt;/pre&gt;
&lt;p&gt;前6行为icap响应包头，下面的是修改后的http请求，可以看到&lt;code&gt;GET http://202.168.2.34/1.html HTTP/1.1\r\n&lt;/code&gt;改成了&lt;code&gt;GET http://202.168.2.34/2.html HTTP/1.1\r\n&lt;/code&gt;,我们成功修改了http请求。下面具体看一下响应包的各个字段：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ICAP/1.0 200 OK\r\n &lt;/code&gt;说的是icap的返回状态码200，表示http请求已经被成功修改，类似于http状态码200&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ISTag&lt;/code&gt;（ICAP Service Tag）说的是我们用的icap service的具体名称和版本号，我们这里用的是greasyspoon&lt;/p&gt;

&lt;p&gt;&lt;code&gt;host&lt;/code&gt;和&lt;code&gt;Encapsulated&lt;/code&gt;不再赘述了&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Connection&lt;/code&gt;字段和http协议的connection一样，含义是当client和server通信时对于长链接如何进行处理。在http1.1中，client和server都是默认对方支持长链接的， 如果client使用http1.1协议，但又不希望使用长链接，则需要在header中指明connection的值为close；如果server方也不想支持长链接，则在response中也需要明确说明connection的值为close.&lt;/p&gt;

&lt;p&gt;不论request还是response的header中包含了值为close的connection，都表明当前正在使用的tcp链接在当天请求处理完毕后会被断掉。以后client再进行新的请求时就必须创建新的tcp链接了。&lt;/p&gt;

&lt;h4 id='http'&gt;顺便再复习一下http报文里的各个字段的含义：&lt;/h4&gt;

&lt;p&gt;1、 Accept：告诉WEB服务器自己接受什么介质类型，&lt;em&gt;/&lt;/em&gt; 表示任何类型，type/* 表示该类型下的所有子类型，type/sub-type。&lt;/p&gt;

&lt;p&gt;2、 Accept-Charset： 浏览器申明自己接收的字符集&lt;/p&gt;

&lt;p&gt;Accept-Encoding： 浏览器申明自己接收的编码方法，通常指定压缩方法，是否支持压缩，支持什么压缩方法（gzip，deflate）&lt;/p&gt;

&lt;p&gt;Accept-Language：：浏览器申明自己接收的语言&lt;/p&gt;

&lt;p&gt;语言跟字符集的区别：中文是语言，中文有多种字符集，比如big5，gb2312，gbk等等。&lt;/p&gt;

&lt;p&gt;3、 Connection：请求：close（告诉WEB服务器或者代理服务器，在完成本次请求的响应后，断开连接，不要等待本次连接的后续请求了）。&lt;/p&gt;

&lt;p&gt;keepalive（告诉WEB服务器或者代理服务器，在完成本次请求的响应后，保持连接，等待本次连接的后续请求）。&lt;/p&gt;

&lt;p&gt;响应：close（连接已经关闭）。&lt;/p&gt;

&lt;p&gt;keepalive（连接保持着，在等待本次连接的后续请求）。&lt;/p&gt;

&lt;p&gt;Keep-Alive：如果浏览器请求保持连接，则该头部表明希望 WEB 服务器保持连接多长时间（秒）。例如：Keep-Alive：300&lt;/p&gt;

&lt;p&gt;4、 Host：客户端指定自己想访问的WEB服务器的域名/IP 地址和端口号。例如：Host：rss.sina.com.cn&lt;/p&gt;

&lt;p&gt;5、 Referer：浏览器向 WEB 服务器表明自己是从哪个 网页/URL 获得/点击 当前请求中的网址/URL。例如：Referer：http://www.sina.com/&lt;/p&gt;

&lt;p&gt;6、 Server: WEB 服务器表明自己是什么软件及版本等信息。例如：Server：Apache/2.0.61 (Unix) 7、 User-Agent: 浏览器表明自己的身份（是哪种浏览器）。例如：User-Agent：Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.8.1.14) Gecko/20080404 Firefox/2、0、0、14&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>阿里巴巴面试总结</title>
   <link href="http://tinyfisher.github.com/blog/2013/09/20/alibaba"/>
   <updated>2013-09-20T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/blog/2013/09/20/alibaba</id>
   <content type="html">&lt;p&gt;15号接到阿里通知，18号上午去面试，研究生期间第一次面试，颇为激动，准备了一番，18号去了大望路那里。前台签到后，在大厅等了一会，面试官拿着我的简历叫我跟他走，到了一个会议室，里面人很多，面试官的花名叫易统，阿里每个人都有花名，武侠风浓烈，马云的花名叫风清扬。。。易统说欢迎来面试，让我自我介绍，期间点开了我的blog- -&lt;/p&gt;

&lt;p&gt;后来主要是围绕简历上写得项目的技能，做了一些提问，主要是我在说，面试官如果感兴趣会深入问下去。时间在一个小时左右，易统十分友好，没有什么压力，问的问题待会详细记录。最后易统说今天的面试就到这里，让我回去了，我想完蛋了，因为之前得知如果面的好会直接二面的，看来是面挂了，而我自我感觉还不错，后来细想想，可能某些问题回答的不够深入，要反思了。问题总结如下：&lt;/p&gt;

&lt;h4 id='tcpip'&gt;tcp/ip三次握手&lt;/h4&gt;

&lt;p&gt;这个基本是滥问题了，答得还不错&lt;/p&gt;

&lt;h4 id='tcp'&gt;tcp有哪些机制保证了他的可靠性&lt;/h4&gt;

&lt;p&gt;这个答得不够好，这里总结下：&lt;/p&gt;

&lt;h5 id='id23'&gt;可靠性包括以下几个方面：&lt;/h5&gt;

&lt;p&gt;1.能够处理数据传输过程中被破坏问题。&lt;/p&gt;

&lt;p&gt;2.能够处理重复数据接收问题。&lt;/p&gt;

&lt;p&gt;3.能够发现数据丢失以及对此进行有效解决。&lt;/p&gt;

&lt;p&gt;4.能够处理接收端数据乱序到达问题。&lt;/p&gt;

&lt;h5 id='id24'&gt;怎么保证解决上述问题？&lt;/h5&gt;

&lt;p&gt;TCP协议规范和当前绝大多数TCP 协议实现代码均采用数据重传和数据确认应答机制来完成TCP 协议的可靠性数据传输。数据超时重传和数据应答机制的基本前提是对每个传输的字节进行编号，即我们通常所说的序列号。数据超时重传是发送端在某个数据包发送出去，在一段固定时间后如果没有收到对该数据包的确认应答，则（假定该数据包在传输过程中丢失）重新发送该数据包。而数据确认应答是指接收端在成功接收到一个有效数据包后，发送一个确认应答数据包给发送端主机，该确认应答数据包中所包含的应答序列号即指已接收到的数据中最后一个字节的序列号加1，加1 的目的在于指出此时接收端期望接收的下一个数据包中第一个字节的序列号。&lt;strong&gt;数据超时重传、数据确认应答以及对每个传输的字节分配序列号是TCP 协议提供可靠性数据传输的核心本质。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.解决数据传输中被破坏的问题&lt;/p&gt;

&lt;p&gt;首先通过对所接收数据包的&lt;strong&gt;CRC校验&lt;/strong&gt;，确认该数据包中数据是否存在错误。如果有，则简单丢弃或者发送一个应答数据包重新对这些数据进行请求。发送端在等待一段时间后，则会重新发送这些数据。本质上，数据传输错误的解决是通过&lt;strong&gt;数据重传机制&lt;/strong&gt;完成的。&lt;/p&gt;

&lt;p&gt;2.解决重复数据接收问题&lt;br /&gt;接到数据包之后，查看序列号，如果数据包已经接收过，则丢弃该数据包，返回确认信息，主要是通过&lt;strong&gt;序列号&lt;/strong&gt;解决这个问题&lt;/p&gt;

&lt;p&gt;3.解决数据丢失问题&lt;br /&gt;主要依靠tcp的&lt;strong&gt;重传机制&lt;/strong&gt;来解决。TCP通过在发送数据报文时设置一个超时定时器来解决这种问题，如果在定时器溢出时还没有收到来自对端对发送报文的确认，它就重传该数据报文。&lt;/p&gt;

&lt;p&gt;4.解决乱序问题&lt;br /&gt;如果通信双方存在多条传输路径， 则有可能出现数据乱序问题，即序列号较大的数据先于序列号较小的数据到达，而发送端确实是按序列号由小到大的顺序发送的。数据乱序的本质是数据都成功到达了，但到达的顺序不尽如人意。对于收到的乱序报文并不丢弃，而是缓存下来(这样做是为了减少更多的重传)，立即发送希望接受的报文确认。对这个问题的解决相对比较简单，只需对这些数据进行重新排序即可。本质上，对数据乱序问题的解决是通过&lt;strong&gt;排序数据序列号&lt;/strong&gt;完成的。&lt;/p&gt;

&lt;h4 id='syn_flood_'&gt;syn flood 攻击&lt;/h4&gt;

&lt;p&gt;由于是安全专业的，面试官又问了我这个问题，答得一般，总结如下：&lt;/p&gt;

&lt;h5 id='synflood'&gt;什么是synflood？&lt;/h5&gt;

&lt;p&gt;在TCP连接的三次握手中，假设一个用户向服务器发送了SYN报文后突然死机或掉线，那么服务器在发出SYN+ACK应答报文后是无法收到客户端的ACK报文的（第三次握手无法完成），这种情况下服务器端一般会重试（再次发送SYN+ACK给客户端）并等待一段时间后丢弃这个未完成的连接，这段时间的长度我们称为SYN Timeout，一般来说这个时间是分钟的数量级（大约为30秒-2分钟）；一个用户出现异常导致服务器的一个线程等待1分钟并不是什么很大的问题，但如果有一个恶意的攻击者大量模拟这种情况，&lt;strong&gt;服务器端将为了维护一个非常大的半连接列表而消耗非常多的资源&lt;/strong&gt;&amp;#8212;-数以万计的半连接，即使是简单的保存并遍历也会消耗非常多的CPU时间和内存，何况还要不断对这个列表中的IP进行SYN+ACK的重试。实际上如果服务器的TCP/IP栈不够强大，最后的结果往往是堆栈溢出崩溃&amp;#8212;即使服务器端的系统足够强大，服务器端也将忙于处理攻击者伪造的TCP连接请求而无暇理睬客户的正常请求（毕竟客户端的正常请求比率非常之小），此时从正常客户的角度看来，服务器失去响应，这种情况我们称作：服务器端受到了SYN Flood攻击（SYN洪水攻击）。&lt;/p&gt;

&lt;h5 id='syn_flood'&gt;怎么检测Syn flood？&lt;/h5&gt;

&lt;p&gt;1、服务端无法提供正常的TCP服务。连接请求被拒绝或超时；&lt;/p&gt;

&lt;p&gt;2、通过 &lt;code&gt;netstat -an&lt;/code&gt; 命令检查系统，发现有大量的&lt;code&gt;SYN_RECV&lt;/code&gt;连接状态。&lt;/p&gt;

&lt;h5 id='id25'&gt;如何防范？&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;缩短SYN- Timeout时间&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;设置每秒最多3个syn封包进入&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id='linux_cpu'&gt;查看Linux CPU使用率命令&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;top&lt;/code&gt;&lt;/p&gt;

&lt;h4 id='id26'&gt;查看进程信息&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;ps -aux&lt;/code&gt;&lt;/p&gt;

&lt;h4 id='vim100200'&gt;vim从100到200行替换字符串&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;:100,200s/vivian/sky/g&lt;/code&gt;&lt;/p&gt;

&lt;h4 id='fluentdmongodboffer23'&gt;总结：简历上写的尽量往深处了解，面试官可能追问具体的机制，例如我用到的几个工具，fluentd，mongodb，我只是简单的使用，不清楚里面的实现机制，往往不能令面试官满意。面试失败的还有一个原因是简历上写的一定是自己非常了解的，不是很懂的还是不要往上写了，或者写了赶紧去补功课，路漫漫其修远兮，找工作是一个虐心的过程，相信经过不断的积攒经验，一定能够拿到满意的offer，下一站：创新工场23号面试，加油！&lt;/h4&gt;</content>
 </entry>
 
 <entry>
   <title>Mongodb 学习整理之安装</title>
   <link href="http://tinyfisher.github.com/linux/2013/07/15/mongodb-install"/>
   <updated>2013-07-15T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/linux/2013/07/15/mongodb-install</id>
   <content type="html">&lt;h3 id='id19'&gt;下载&lt;/h3&gt;

&lt;p&gt;下载MongoDB，此处下载的版本是：&lt;a href='http://fastdl.mongodb.org/linux/mongodb-linux-i686-1.8.1.tgz'&gt;mongodb-linux-i686-1.8.1.tgz.tar&lt;/a&gt;&lt;/p&gt;

&lt;h3 id='id20'&gt;安装&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;step1：&lt;/strong&gt;解压文件到某目录下,然后重命名：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost src]# tar -xzvf mongodb-linux-i686-1.8.1.tgz.tar    
[root@localhost src]# mv mongodb-linux-i686-1.8.1 /usr/local/mongodb/  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;step2：&lt;/strong&gt;查看安装后的文件情况：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost src]# cd /usr/local/mongodb/   
[root@localhost mongodb]# ls   
bin  GNU-AGPL-3.0  README  THIRD-PARTY-NOTICES   
[root@localhost mongodb]# cd bin/   
[root@localhost bin]# ls   
bsondump  dbbak  mongo  mongod  mongodump  mongoexport  mongofiles  mongoimport  mongorestore mongos  mongosniff  mongostat    &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bin下的mongod就是MongoDB的服务端进程，mongo就是其客户端，其它的命令用于MongoDB的其它用途如MongoDB文件导出等。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step3:&lt;/strong&gt;启动MongoDB:&lt;/p&gt;

&lt;p&gt;要先建立好MongoDB 存放数据文件和日志文件的目录，需要手动建立：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir /data/mongodb_data
mkdir /data/mongodb_log
touch /data/mongodb_log/mongodb.log
[root@localhost etc]# cd /data/   
[root@localhost data]# ls   
mongodb_data  mongodb_log    &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在MongoDB安装目录下的bin下使用mongod启动MongoDB&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./mongod --dbpath=/data/mongodb_data/ --logpath=/data/mongodb_log/mongodb.log --logappend&amp;amp;  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;等待启动成功后，可查看是否启动成功了，默认端口号是27017，当然在启动时也可以指定未使用的其它端口。先通过查看端口号看MongoDB是否启动了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost data]# netstat -lanp | grep &amp;quot;27017&amp;quot;  
tcp   0    0 0.0.0.0:27017      0.0.0.0:*     LISTEN      1573/mongod            
unix  2  [ ACC ]    STREAM   LISTENING    5874  1573/mongod   /tmp/mongodb-27017.sock    &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到，已启动成功，现在使用mongo客户端访问一下该数据库。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost bin]# cd /usr/local/mongodb/bin/   
[root@localhost bin]# ./mongo   
MongoDB shell version: 1.8.1  
connecting to: test   &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;到这一步说明已经安装成功了。&lt;/p&gt;

&lt;h3 id='id21'&gt;额外工作&lt;/h3&gt;

&lt;p&gt;注意，上述我们启动MongoDB都是手动使用mongod来启动，这样关闭计算机后，下次再进来它又没启动了，所以还得手动启动，因此，为避免这种繁琐的工作，可以把mongod放到服务自启动项中，这样计算机一开启mongod服务也就启动了。编辑/etc/rc.local，加入下述代码然后再保存即可。 (也可以写一个脚本，然后开机自动运行)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#add mongonDB service   
/usr/local/mongodb/bin/mongod --dbpath=/data/mongodb_data/ --logpath=/data/mongodb_log/mongodb.log --logappend&amp;amp;    &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者编写开机自启动脚本start_mongodb.sh&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /usr/local/mongodb-linux-i686-2.2.1/bin  //具体版本具体变化
./mongod --dbpath=/data/mongodb_data/ --logpath=/data/mongodb_log/mongodb.log --logappend&amp;amp;   &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;路径和你设置mongodb的datapath，logpath一致 我们重启计算机再看MongoDB是否启动，重启后可以直接使用 mongo命令登录，最终发现是可以成功的。&lt;/p&gt;

&lt;p&gt;另外，我们使用mongo命令登录 MongoDB还要转到mongo命令所在目录再执行./mongo，这样是不是有些麻烦？因此，我们可以简化这点，将该命令文件copy到/usr/bin下，这样就可以在任何目录下使用mongo命令了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost bin]# ls   
bsondump  dbbak  mongo  mongod  mongodump  mongoexport  mongofiles  mongoimport  mongorestore mongos  mongosniff  mongostat   
[root@localhost bin]# cp mongo /usr/bin/    &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;转到任一目录试下mongo命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost bin]# cd /   
[root@localhost /]# mongo   
MongoDB shell version: 1.8.1  
connecting to: test   &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到登录成功了，说明我们可以像使用ls命令一样使用mongo命令了。&lt;/p&gt;

&lt;h3 id='id22'&gt;安装图形化界面&lt;/h3&gt;

&lt;p&gt;mongoDB有许多图形化操作软件，我使用的是UMongo：&lt;/p&gt;

&lt;p&gt;下载&lt;a href='https://github.com/agirbal/umongo/downloads'&gt;Umongo&lt;/a&gt;,解压文件，在终端运行&lt;code&gt;launch-umongo.sh&lt;/code&gt;脚本文件即可&lt;/p&gt;

&lt;p&gt;ok,至此我们已经安装好了MongoDB~&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Mongodb 学习整理之介绍</title>
   <link href="http://tinyfisher.github.com/linux/2013/07/09/mongodb-introduce"/>
   <updated>2013-07-09T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/linux/2013/07/09/mongodb-introduce</id>
   <content type="html">&lt;h2 id='what_is_mongodb'&gt;What is Mongodb?&lt;/h2&gt;

&lt;p&gt;MongoDB是一个高性能，开源，无模式的文档型数据库，是当前&lt;strong&gt;NoSQL&lt;/strong&gt;数据库产品中最热门的一种。它在许多场景下可用于替代传统的关系型数据库或键/值存储方式。那什么是NoSQL呢？&lt;/p&gt;

&lt;h3 id='what_is_nosql'&gt;What is NoSQL?&lt;/h3&gt;

&lt;p&gt;NoSQL，全称是”&lt;strong&gt;Not Only Sql&lt;/strong&gt;”,指的是非关系型的数据库。这类数据库主要有这些特点：非关系型的、分布式的、开源的、水平可扩展的。原始的目的是为了大规模web应用。NoSQL被我们用得最多的当数&lt;strong&gt;key-value&lt;/strong&gt;存储，当然还有其他的文档型的、列存储、图型数据库、xml数据库等。&lt;/p&gt;

&lt;h3 id='why_nosql'&gt;Why NoSQL?&lt;/h3&gt;

&lt;p&gt;随着互联网web2.0网站的兴起，传统的关系型数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，例如：&lt;/p&gt;

&lt;h4 id='id15'&gt;对数据库高并发读写的需求&lt;/h4&gt;

&lt;p&gt;web2.0网站要根据用户个性化信息来实时生成动态页面和提供动态信息，所以基本上无法使用动态页面静态化技术，因此数据库并发负载非常高，往往要达到每秒上万次读写请求。&lt;strong&gt;关系型数据库应付上万次SQL查询还勉强顶得住，但是应付上万次SQL写数据请求，硬盘IO 就已经无法承受了&lt;/strong&gt;，其实对于普通的BBS网站，往往也存在对高并发写请求的需求。&lt;/p&gt;

&lt;h4 id='id16'&gt;对海量数据的高效率存储和访问的需求&lt;/h4&gt;

&lt;p&gt;对于大型的SNS网站，每天用户产生海量的用户动态信息，以国外的Friend feed为例，一个月就达到了2.5亿条用户动态，&lt;strong&gt;对于关系数据库来说，在一张2.5亿条记录的表里面进行SQL查询，效率是极其低下乃至不可忍受的&lt;/strong&gt;。再例如大型web网站的用户登录系统，例如腾讯，盛大，动辄数以亿计的帐号，关系数据库也很难应付。&lt;/p&gt;

&lt;h4 id='id17'&gt;对数据库的高可扩展性和高可用性的需求&lt;/h4&gt;

&lt;p&gt;在基于web的架构当中，数据库是最难进行横向扩展的，当一个应用系统的用户量和访问量与日俱增的时候，你的数据库却没有办法像web server和app server那样简单的通过添加更多的硬件和服务节点来扩展性能和负载能力。对于很多需要提供24小时不间断服务的网站来说，对数据库系统进行升级和扩展是非常痛苦的事情，往往需要停机维护和数据迁移，可是停机维护随之带来的就是公司收入的减少&lt;/p&gt;

&lt;p&gt;基于以上三点，NoSQL在现在越来越流行。&lt;/p&gt;

&lt;h2 id='why_mongodb'&gt;Why Mongodb?&lt;/h2&gt;

&lt;p&gt;MongoDB是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。&lt;strong&gt;他支持的数据结构非常松散，是类似json 的bjson格式，因此可以存储比较复杂的数据类型&lt;/strong&gt;。MongoDB最大的特点是他&lt;strong&gt;支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引&lt;/strong&gt;。它是一个面向集合的,模式自由的文档型数据库。&lt;/p&gt;

&lt;p&gt;ok，既然MongoDB如此神奇，那么我们该怎么安装和使用他呢？下篇blog继续介绍。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>利用Hostapd搭建无线wifi</title>
   <link href="http://tinyfisher.github.com/linux/2013/06/23/hostapd"/>
   <updated>2013-06-23T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/linux/2013/06/23/hostapd</id>
   <content type="html">&lt;p&gt;网上这类文章一大堆，但都有一些问题，应该是环境不一样，所以在搭建之前，先说下我的环境：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Linux系统：&lt;code&gt;ubuntu 10.04&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;无线网卡：&lt;code&gt;TP-LINK WN822N&lt;/code&gt;（需要网卡支持Master模式，其他网卡请自行搜索）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ok, 下面介绍如何搭建：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step1：&lt;/strong&gt;安装网卡驱动，网卡都不识别的话就gg了，请参见我的博文&lt;a href='http://tinyfisher.github.io/linux/2013/03/05/tplink/'&gt;《TL-WN822N TL-WN722N linux安装驱动》&lt;/a&gt;，识别之后&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ifconfig wlan1 10.0.0.1  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为网卡设置ip地址。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step2：&lt;/strong&gt;下载&lt;a href='http://hostap.epitest.fi/releases/hostapd-1.1.tar.gz'&gt;hostapd&lt;/a&gt;，在解压安装之前，先安装libnl和libssl，否则hostapd无法编译通过，命令如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install libnl-dev
sudo apt-get install libssl-dev  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;step3：&lt;/strong&gt;安装hostapd，解压压缩包，终端进入到hostapd文件夹，&lt;code&gt;configure&lt;/code&gt;，&lt;code&gt;make&lt;/code&gt;，&lt;code&gt;make install&lt;/code&gt; 常见的三个步骤&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step4：&lt;/strong&gt;修改配置文件，在hostapd文件夹里的etc目录下，找到&lt;code&gt;hostapd.conf&lt;/code&gt;文件，编辑如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;interface=wlan1 // 根据你的无线网卡名修改
driver=nl80211  //重要
ssid=tinyfisher  //这是AP名称
channel=6
hw_mode=g
ignore_broadcast_ssid=0
auth_algs=1
wpa=3
wpa_passphrase=xxxxxxxx   //这是你的密码
wpa_key_mgmt=WPA-PSK
wpa_pairwise=TKIP
rsn_pairwise=CCMP  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动hostapd，命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./hostapd -B hostapd.conf  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后就可以搜索到 tinyfisher的wifi了。&lt;/p&gt;

&lt;p&gt;但是此时设备还不能通过wifi上网，还需要搭建dhcp服务器：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install dnsmasq  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改&lt;code&gt;/etc/dnsmasq.conf&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;interface=wlan1 #根据你的网卡名称修改
dhcp-range=10.0.0.10,10.0.0.110,6h     #设置dhcp地址范围，即租借时间6小时
dhcp-option=3,10.0.0.1 #配置网关
dhcp-option=6,202.114.128.2  #配置dns，请自己修改为外网的dns地址  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重启&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnsmasq：/etc/init.d/dnsmasq restart  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ok，此时连接到wifi上的设备都能被随机分配到从&lt;code&gt;10.0.0.10~10.0.0.110&lt;/code&gt; 的地址&lt;/p&gt;

&lt;p&gt;现在就能上网了吗？不行，我们还需要一个外网出口，并且将内网的流量通过这个外网接口连出去，其实就是做一个&lt;code&gt;SNAT&lt;/code&gt;，所以我们还需要设置&lt;code&gt;iptables&lt;/code&gt;，命令如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iptables -F
iptables -X
iptables -t nat -F
iptables -t nat -X
iptables -t nat -A POSTROUTING -s 10.0.0.0/8 -o eth0 -j MASQUERADE    //其中eth0就是外网接口，请根据你的实际情况修改  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后一步，开启网卡转发功能：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo 1 &amp;gt;/proc/sys/net/ipv4/ip_forward  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;搞定收工！&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>2013微软暑期实习笔试错题、疑题整理</title>
   <link href="http://tinyfisher.github.com/blog/2013/05/23/microsoft_test"/>
   <updated>2013-05-23T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/blog/2013/05/23/microsoft_test</id>
   <content type="html">&lt;h3 id='id14'&gt;参加了微软“智在未来”暑期实习笔试，跪了，将错题、疑题整理如下，方便后面复习整理。&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What&amp;#8217;s the output of the following code?(3 Points)&lt;/strong&gt; B&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class A  
{  
public:  
    virtual void f()  
    {  
        cout&amp;lt;&amp;lt;&amp;quot;A::f()&amp;quot;&amp;lt;&amp;lt;endl;  
    }  
    void f() const  
    {  
        cout&amp;lt;&amp;lt;&amp;quot;A::f() const&amp;quot;&amp;lt;&amp;lt;endl;  
    }  
};  
  
class B: public A  
{  
public:  
    void f()  
    {  
        cout&amp;lt;&amp;lt;&amp;quot;B::f()&amp;quot;&amp;lt;&amp;lt;endl;  
    }  
    void f() const  
    {  
        cout&amp;lt;&amp;lt;&amp;quot;B::f() const&amp;quot;&amp;lt;&amp;lt;endl;  
    }  
};  
  
void g(const A* a)  
{  
    a-&amp;gt;f();  
}  
  
int main()  
{  
    A* a = new B();  
    a-&amp;gt;f();  
    g(a);  
    delete a ;  
}  

A. B::f()B::f()const    
B. B::f()A::f()const  
C. A::f()B::f()const    
D. A::f()A::f()const  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解析：类的成员函数后面加 const，&lt;strong&gt;表明这个函数不会对这个类对象的数据成员（准确地说是非静态数据成员）作任何改&lt;/strong&gt;变。&lt;/p&gt;

&lt;p&gt;在设计类的时候，一个原则就是对于不改变数据成员的成员函数都要在后面加 const，而对于改变数据成员的成员函数不能加 const。所以 const 关键字对成员函数的行为作了更加明确的限定：&lt;strong&gt;有 const 修饰的成员函数（指 const 放在函数参数表的后面，而不是在函数前面或者参数表内），只能读取数据成员，不能改变数据成员；&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;没有 const 修饰的成员函数，对数据成员则是可读可写的。除此之外，在类的成员函数后面加 const 还有什么好处呢？&lt;strong&gt;那就是常量（即 const）对象可以调用 const 成员函数，而不能调用非const修饰的函数。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is the difference between a linked list and an array?(3 Points)&lt;/strong&gt; （全选）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A. Search complexity when both are sorted  

B. Dynamically add/remove  

C. Random access efficiency  

D. Data storage type  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;【此题D选项存在疑问】&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;About the Thread and Process in Windows, which description(s) is(are) correct:(3 Points)&lt;/strong&gt; C&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A. One application in OS must have one Process, but not a necessary to have one Thread  

B. The Process could have its own Stack but the thread only could share the Stack of its parent Process  

C. Thread must belongs to a Process  

D. Thread could change its belonging Process  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解析：A选项，一个程序至少有一个进程，一个进程至少包含一个线程（主线程）&lt;/p&gt;

&lt;p&gt;B选项，线程共享父进程的数据空间，也可以拥有自己的栈空间&lt;/p&gt;

&lt;p&gt;C对，线程不能独立存在，必须属于一个进程&lt;/p&gt;

&lt;p&gt;D明显错误&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please choose the right statement about const usage:(3 Points)&lt;/strong&gt; ABC&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A. const int a; //const integer  

B. int const a; //const integer  

C. int const *a; //a pointer which point to const integer  

D. const int *a; //a const pointer which point to integer  

E. int const *a; // a const pointer which point to integer  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解析：这里注意一下A、B的写法均可，两者意思一样&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1 of 1000 bottles of water is poisoned which will kill a rat in 1 week if the rat drunk any amout of the water. Given the bottles of water have no visual difference, how many rats are needed at least to find the poisoned one in 1 week?(5 Points)&lt;/strong&gt; B&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A. 9  

B. 10  

C. 32  

D. None of the above  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解析：2的10次方=1024，大于1000，用二进制的思维思考问题&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Which of the following statement(s) equal(s) value 1 in C programming language?(5 Points)&lt;/strong&gt; BCD&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A. the return value of main function if program ends normally

B. return (7&amp;amp;1)  

C. char *str=&amp;quot;microsoft&amp;quot;; return str==&amp;quot;microsoft&amp;quot;  

D. return &amp;quot;microsoft&amp;quot;==&amp;quot;microsoft&amp;quot;  

E. None of the above  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解析：A选项，C程序正常退出，return 0；&lt;/p&gt;

&lt;p&gt;B选项，计算即可得&lt;/p&gt;

&lt;p&gt;C选项，因为C语言中是没有bool类型的（1个字节，只有0,1），所以返回1&lt;/p&gt;

&lt;p&gt;D选项，同C&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How many rectangles you can find from 3X4 grid?(5 Points)&lt;/strong&gt; D&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A. 18  

B. 20  

C. 40  

D. 60 

E. None of above is correct  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解析：智力题 整不了&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Which of the following sorting algorithm(s) is(are) stable sorting?(5 Points)&lt;/strong&gt; A&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A. bubble sort  

B. quick sort  

C. heap sort  

D. merge sort  

E. Selection sort  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解析：不稳定排序：“快选希堆”，原地排序：“快选希堆冒”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Model-View-Controller(MVC) is an architectural pattern that frequently used in web applications. Which of the following statement(s) is(are) correct:(5 Points)&lt;/strong&gt; AB&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A. Models often represent data and the business logics needed to manipulate the data in the application  

B. A view is a (visual) representation of its model. It renders the model into a form suitable for interaction, typically a user interface element  

C. A controller is the link between a user and the system. It accepts input from the user and instructs the model and a view to perform actions based on that input  

D. The common practice of MVC in web applications is, the model receives GET or POST input from user and decides what to do with it, handing over to controller and which hand control to views(HTML-generating components)  

E. None of the above  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解析：不是很清楚，关于MVC，请看这篇blog，写得挺直白的&lt;a href='http://www.ruanyifeng.com/blog/2007/11/mvc.html'&gt;http://www.ruanyifeng.com/blog/2007/11/mvc.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Given a set of N balls and one of which is defective (weighs less than others), you are allowed to weigh with a balance 3 times to find the defective. Which of the following are possible N?(13 Points)&lt;/strong&gt; ABCD&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A. 12  

B. 16  

C. 20  

D. 24  

E. 28  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解析：A选项：第一次：4,4,4 第二次：2,2，第三次：1,1, B选项：第一次：5,5,6，第二次：若在某一个5中，2,2,1；若在6中，2,2,2,；第三次1,1, C选项：第一次：7,7,6,；第二次：若在某一个7中，2,2,3；若在6中，2,2,2；第三次，1,1 D选项：第一次：8,8,8；第二次：2,3,3；第三次1,1&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>fluentd插件开发</title>
   <link href="http://tinyfisher.github.com/linux/2013/05/01/fluentd"/>
   <updated>2013-05-01T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/linux/2013/05/01/fluentd</id>
   <content type="html">&lt;p&gt;fluentd默认支持了一些插件，如apache，但是最近做项目对squid日志进行分析时，发现fluentd没有这个默认插件，需要自己开发，方法如下 自己编写一个ruby脚本，比如:&lt;code&gt;in_mytail.rb&lt;/code&gt;,将他放到&lt;code&gt;/etc/td-agent/plugin&lt;/code&gt; 即可&lt;/p&gt;

&lt;p&gt;修改&lt;code&gt;/etc/td-agent/td-agent.conf&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;source&amp;gt;
	type mytail
	path /path/to/myformat_file
	tag myapp.mytail
&amp;lt;source&amp;gt;  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;标签里面是日志来源，type表示input插件类型，这里是自己编写的类型，path是源日志文件，tag是标签，用于区分其他插件.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;match **&amp;gt;
	type stdout
&amp;lt;/match&amp;gt;  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用于输出，这里输出到stdout，可以是file，mongodb等，看自己需要. 调试模式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;td-agent -vv  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ruby脚本如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class MyTailInput &amp;lt; Fluent::TailInput  
  Fluent::Plugin.register_input(&amp;#39;mytail&amp;#39;, self)  
  
  # Override &amp;#39;configure_parser(conf)&amp;#39; method.  
  # You can get config parameters in this method.  
  def configure_parser(conf)  
    @time_format = conf[&amp;#39;time_format&amp;#39;] || &amp;#39;%Y-%M-%d %H:%M:%S&amp;#39;  
  end  
    
  # Override &amp;#39;parse_line(line)&amp;#39; method that returns time and record.  
  # This example method assumes following log format:  
  #   %Y-%m-%d %H:%M:%S\tkey1\tvalue1\tkey2\tvalue2...  
  #   %Y-%m-%d %H:%M:%S\tkey1\tvalue1\tkey2\tvalue2...  
  #   ...  
  def parse_line(line)  
    elements = line.split(&amp;quot;\t&amp;quot;)  
    time=&amp;quot;2012-11-11 11:11:11&amp;quot;  #why unknow  
    t_time = Time.strptime(time, @time_format).to_i  
    record = {}  
    record[&amp;#39;logtime&amp;#39;]=elements[0]  
    record[&amp;#39;logcontent&amp;#39;]=elements[1]  
    return t_time, record  
  end  
end  &lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Mongodb的备份与恢复</title>
   <link href="http://tinyfisher.github.com/linux/2013/04/23/mongodb"/>
   <updated>2013-04-23T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/linux/2013/04/23/mongodb</id>
   <content type="html">&lt;p&gt;坑爹的保密检查需要擦除硬盘，所有环境都需要重新安装，Mongodb数据库需要进行备份，还好Mongodb为我们提供了&lt;code&gt;mongodump&lt;/code&gt;和&lt;code&gt;mongorestore&lt;/code&gt;两种方法，非常方便。&lt;/p&gt;

&lt;p&gt;进到mongodb的bin目录下：&lt;/p&gt;

&lt;p&gt;备份：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongodump -d Injection   //Injection 就是你要备份的数据库&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行之后会生成dump文件夹，里面子目录Injection就是备份的数据&lt;/p&gt;

&lt;p&gt;恢复：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongorestore -d Injection dump/Injection&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就完成的备份与恢复，是不是十分方便呢~随后送上其他环境配置日志，坑爹的保密检查。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>TL-WN822N TL-WN722N linux安装驱动</title>
   <link href="http://tinyfisher.github.com/linux/2013/03/05/tplink"/>
   <updated>2013-03-05T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/linux/2013/03/05/tplink</id>
   <content type="html">&lt;p&gt;这两款的芯片都是AR系列的芯片，所以只要安装这款芯片的驱动：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ath9k_htc&lt;/code&gt;即可,只需要两步&lt;/p&gt;

&lt;p&gt;(1)安装&lt;a href='https://www.kernel.org/pub/linux/kernel/projects/backports/stable/v3.7.9/'&gt;compat-drivers-3.7.9-1.tar.gz&lt;/a&gt;,这类似于万能驱动，里面包含了很多芯片的驱动，很好用，编译时间有点长，耐心等待&lt;/p&gt;

&lt;p&gt;下载完成之后，将压缩包解压，从命令行终端进入到解压的文件夹中，输入命令&lt;code&gt;sudo make&lt;/code&gt;，等待时间较长，再输入命令 &lt;code&gt;make install&lt;/code&gt;,等待时间也较长，便完成了安装&lt;/p&gt;

&lt;p&gt;(2)安装&lt;a href='http://nl.archive.ubuntu.com/ubuntu/pool/main/l/linux-firmware/linux-firmware_1.60_all.deb'&gt;linux-firmware&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载完成之后，直接双击文件包，即可自动安装&lt;/p&gt;

&lt;p&gt;重新启动 ，插上usb无线网卡，命令行输入&lt;code&gt;ifconfig -a&lt;/code&gt; ，如果出现&lt;code&gt;wlan0&lt;/code&gt;，&lt;code&gt;wlan1&lt;/code&gt; 等信息，则驱动成功&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>使用ip route命令实现多链路负载均衡</title>
   <link href="http://tinyfisher.github.com/linux/2013/02/07/loadbalance"/>
   <updated>2013-02-07T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/linux/2013/02/07/loadbalance</id>
   <content type="html">&lt;p&gt;其实在linux下实现多链路负载均衡很简单，只需借助ip route命令即可。&lt;/p&gt;

&lt;p&gt;环境：&lt;code&gt;ubuntu 10.04&lt;/code&gt; ，两个3G网卡，分别为&lt;code&gt;CDMA2000&lt;/code&gt; 和 &lt;code&gt;WCDMA&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;分别将两个网卡拨号上网，方法不再具体描述，拨号成功后会多出两条链路&lt;code&gt;ppp0&lt;/code&gt;和&lt;code&gt;ppp1&lt;/code&gt;，注意拨号脚本里不要添加默认网关，（具体请参见&lt;a href='http://tinyfisher.github.io/linux/2013/01/29/ppp/'&gt;《pppd拨号与默认网关》&lt;/a&gt;），而是手动添加两条默认路由。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;利用&lt;code&gt;iptables&lt;/code&gt;进行&lt;code&gt;nat&lt;/code&gt;转换，不再赘述。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3.此时路由表里会有两条默认路由，其实只有第一个起作用，所有的流量都会从这条链路出去，没有实现负载均衡的效果，只需使用如下命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ip route replace default equalize nexthop dev ppp0 weight 1 nexthop dev ppp1 weight 1   &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中weight表示权重，根据链路的实际情况设置相应数值。&lt;/p&gt;

&lt;p&gt;4.测试：内网机器进行网络活动，在网关利用命令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tc -s qdisc ls dev ppp0,tc -s qdisc ls dev ppp1  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;分别查看两条链路的流量，发现基本流量是按照1:1的比率的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;：内网的机器通过多链路网关访问外网速度比单链路得到提升，但是网关本身访问外网的速度比单链路要慢得多，甚至不能访问网站，原因不详，猜想是http数据包从不同的链路进出，不能很好的拼凑给网关。总之现在这个项目不需要网关访问外网，留待以后再讨论。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>pppd拨号与默认网关</title>
   <link href="http://tinyfisher.github.com/linux/2013/01/29/ppp"/>
   <updated>2013-01-29T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/linux/2013/01/29/ppp</id>
   <content type="html">&lt;p&gt;在linux下使用3G网卡上网，使用pppd工具进行拨号，拨号脚本如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nodetach
/dev/ttyUSB0
19200
nocrtscts
connect &amp;#39;/usr/sbin/chat -v -f /etc/ppp/peers/chat_script_unicom&amp;#39;
debug
user &amp;quot;card&amp;quot;
password &amp;quot;card&amp;quot;
ipcp-accept-local
ipcp-accept-remote
defaultroute&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中&lt;code&gt;defaultroute&lt;/code&gt;表示拨号成功后，自动添加一条默认路由，如果只使用一个网卡拨号，当然很方便;&lt;/p&gt;

&lt;p&gt;但是我发现如果使用两个以上的网卡进行拨号，会产生多条默认路由，这当然也没有问题，只是当其中一条断开后，所有的默认路由都消失了，即使其他的网卡工作正常，也不能上网，所以当有多个网卡拨号的时侯，不建议使用&lt;code&gt;defaultroute&lt;/code&gt;这个选项，可以手动添加默认路由：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;route add default gw x.x.x.x&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>DP实例之最长上升子序列LIS</title>
   <link href="http://tinyfisher.github.com/algorithm/2013/01/23/LIS"/>
   <updated>2013-01-23T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/algorithm/2013/01/23/LIS</id>
   <content type="html">&lt;pre&gt;&lt;code&gt;/*
    LIS:最长递增子序列，例如：23453267，最长递增子序列为：234567
    lis(i)表示以a[i]结束的递增子序列的长度
    lis(i)=max{lis(k)+1,1}  k from 0 to i-1
    最长递增子序列长度为max(lis[]);
*/


int LIS(int a[],int len)
{
   int *p=(int *)malloc(sizeof(int)*len);
   int i=0;
   int j=0;
   int result=0;
   if(p==NULL)
        return -1;
   for(i=0;i&amp;lt;len;i++)
   {
       p[i]=1;
       for(j=0;j&amp;lt;i;j++)
       {
           if(a[i]&amp;gt;a[j]&amp;amp;&amp;amp;p[j]+1&amp;gt;p[i])
           {
               p[i]=p[j]+1;
           }
       }
   }
   for(i=0;i&amp;lt;len;i++)
   {
       if(result&amp;lt;p[i])
       {
           result =p[i];
       }
   }
   free(p);
   return result;
}&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>DP实例之最长公共子序列LCS</title>
   <link href="http://tinyfisher.github.com/algorithm/2012/12/12/LCS"/>
   <updated>2012-12-12T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/algorithm/2012/12/12/LCS</id>
   <content type="html">&lt;pre&gt;&lt;code&gt;/*
    LCS：求最长公共子序列
    例如：s1=&amp;quot;abdrge&amp;quot;,s2=&amp;quot;adreg&amp;quot;,则LCS=&amp;quot;adre&amp;quot;
    状态方程：lcs(i,j)=lcs(i-1,j-1)+1,其中s1[i]=s2[j]
    或者 lcs(i,j)=max{lcs(i,j-1),lcs(i-1,j)}
*/
int LCS(char *a,char *b)
{
    int len_a=strlen(a);   //行
    int len_b=strlen(b);   //列
    int **len=NULL;
    int **r=NULL;
    int i=0;
    int j=0;
    int lcs_len=0;
    len=(int **)malloc(sizeof(int *)*(len_a+1));       //申请二维数组空间
    r=(int **)malloc(sizeof(int *)*(len_a+1));
    if (len==NULL||r==NULL)
        return -1;
    for(;i&amp;lt;=len_a;i++)
    {
        *(len+i)=(int *)malloc(sizeof(int)*(len_b+1));
        *(r+i)=(int *)malloc(sizeof(int)*(len_b+1));
        if (*(len+i)==NULL||*(r+i)==NULL)
            return -1;
    }

    //LCS状态方程
    for(i=0;i&amp;lt;=len_a;i++)     //初始化
    {
        for(j=0;j&amp;lt;=len_b;j++)
        {
            len[i][j]=0;
            r[i][j]=0;
        }
    }
    for(i=1;i&amp;lt;=len_a;i++)
    {
        for(j=1;j&amp;lt;=len_b;j++)
        {
            if(a[i-1]==b[j-1])
            {
                len[i][j]=len[i-1][j-1]+1;
                r[i][j]=1;
            }
            else if(len[i][j-1]&amp;gt;=len[i-1][j])  //左边的大于等于上边的
            {
                len[i][j]=len[i][j-1];
                r[i][j]=2;
            }
            else
            {
                 len[i][j]=len[i-1][j];
                 r[i][j]=3;
            }
        }
    }

    //打印公共子序列
    print_lcs(r,a,len_a,len_b);
    free(r);
    lcs_len= len[len_a][len_b];
    free(len);
    return lcs_len;
}

void print_lcs(int **r,char *a,int i,int j)
{
    if(i==0||j==0)
        return ;
    else if(r[i][j]==1)
    {
        print_lcs(r,a,i-1,j-1);
        printf(&amp;quot;%c&amp;quot;,*(a+i-1));
    }
    else if(r[i][j]==2)
        print_lcs(r,a,i,j-1);
    else
        print_lcs(r,a,i-1,j);
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt='alt text' src='/assets/themes/images/20130613111911031.png' /&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>iptables配置笔记</title>
   <link href="http://tinyfisher.github.com/linux/2012/12/05/iptables"/>
   <updated>2012-12-05T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/linux/2012/12/05/iptables</id>
   <content type="html">&lt;pre&gt;&lt;code&gt;1.配置准备
＃iptables -F //清除原有规则
＃iptables -X //清除自定义链
 
2.定义策略
＃iptables -P INPUT DROP //默认丢弃，即丢弃所有的包
＃iptables -P OUTPUT DROP
＃iptables -P FORWARD DROP
 
3.典型的规则配置实例
# iptables -A INPUT|OUTPUT|FORWARD -s 源IP -d 目的IP -p tcp|udp|icmp --sport 源端口--dport 目的端口 -j ACCEPT|DROP
 
4.添加规则
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃开放HTTP
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃iptables -A INPUT -p tcp --sport 80 -j ACCEPT //针对本机,若本机不需要，可省略
＃iptables -A OUTPUT -p tcp --dport 80 -j ACCEPT
＃iptables -A FORWARD -p tcp --sport 80 -j ACCEPT //允许转发
＃iptables -A FORWARD -p tcp --dport 80 -j ACCEPT //下面类似
 
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃开放DNS
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃iptables -A INPUT -p udp --sport 53 -j ACCEPT
＃iptables -A OUTPUT -p udp --dport 53 -j ACCEPT
＃iptables -A FORWARD -p udp --sport 53 -j ACCEPT
＃iptables -A FORWARD -p udp --dport 53 -j ACCEPT
 
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃开放SMTP和POP3
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃iptables -A INPUT -p tcp --sport 25 -j ACCEPT
＃iptables -A OUTPUT -p tcp --dport 25 -j ACCEPT
＃iptables -A INPUT -p tcp --sport 110 -j ACCEPT
＃iptables -A OUTPUT -p tcp --dport 110 -j ACCEPT
＃iptables -A FORWARD -p tcp --sport 25 -j ACCEPT
＃iptables -A FORWARD -p tcp --dport 25 -j ACCEPT
＃iptables -A FORWARD -p tcp --sport 110 -j ACCEPT
＃iptables -A FORWARD -p tcp --dport 110 -j ACCEPT
 
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃开放SSH
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃iptables -A INPUT -p tcp --sport 22 -j ACCEPT
＃iptables -A OUTPUT -p tcp --dport 22 -j ACCEPT
＃iptables -A FORWARD -p tcp --sport 22 -j ACCEPT
＃iptables -A FORWARD -p tcp --dport 22 -j ACCEPT
 
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃开放Telnet
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃iptables -A INPUT -p tcp --sport 23 -j ACCEPT
＃iptables -A OUTPUT -p tcp --dport 23 -j ACCEPT
＃iptables -A FORWARD -p tcp --sport 23 -j ACCEPT
＃iptables -A FORWARD -p tcp --dport 23 -j ACCEPT
 
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃开放FTP
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃iptables -A INPUT -p tcp --sport 21 -j ACCEPT
＃iptables -A OUTPUT -p tcp --dport 21 -j ACCEPT
＃iptables -A FORWARD -p tcp --sport 21 -j ACCEPT
＃iptables -A FORWARD -p tcp --dport 21 -j ACCEPT
＃iptables -A INPUT -p tcp --sport 20 -j ACCEPT
＃iptables -A OUTPUT -p tcp --dport 20 -j ACCEPT
＃iptables -A FORWARD -p tcp --sport 20 -j ACCEPT
＃iptables -A FORWARD -p tcp --dport 20 -j ACCEPT
 
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃开放SSL
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃iptables -A INPUT -p tcp --sport 443 -j ACCEPT
＃iptables -A OUTPUT -p tcp --dport 443 -j ACCEPT
＃iptables -A FORWARD -p tcp --sport 443 -j ACCEPT
＃iptables -A FORWARD -p tcp --dport 443 -j ACCEPT
 
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃开放ICMP
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃iptables -A INPUT -p icmp -j ACCEPT
＃iptables -A OUTPUT -p icmp -j ACCEPT
＃iptables -A FORWARD -p icmp -j ACCEPT
＃iptables -A FORWARD -p icmp -j ACCEPT
 
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃开放TCP
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃iptables -A INPUT -p tcp -j ACCEPT
＃iptables -A OUTPUT -p tcp -j ACCEPT
＃iptables -A FORWARD -p tcp -j ACCEPT
＃iptables -A FORWARD -p tcp -j ACCEPT
 
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃开放udp
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃iptables -A INPUT -p udp -j ACCEPT
＃iptables -A OUTPUT -p udp -j ACCEPT
＃iptables -A FORWARD -p udp -j ACCEPT
＃iptables -A FORWARD -p udp -j ACCEPT
 
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃实现NAT
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃iptables -t nat -A POSTROUTING -s 192.168.1.0/24 -o eth0 -j SNAT --to-source 1.2.3.4
＃iptables -t nat -A PREROUTING -d 192.168.1.0/24 -i eth1 -j DNAT --to-destination 1.2.3.4
 
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃规则的保存和重载
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃iptables-save -c &amp;gt; /etc/iptables-save
＃iptables-restore -c &amp;lt; /etc/iptables-save
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃根据数据出入网卡匹配，假设eth0连接内网，eth1连接外网
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
＃iptables –A INPUT –i eth0 –j ACCEPT  //从eth0流入的数据都接收
＃iptables – A FORWARD – o eth1 –j ACCEPT //从eth1流出的数据都转发&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上是一些基本配置，可以开放更多的服务，还可以进行更详尽的匹配，如源目地址，出入网卡等，以后可以根据要求进一步设置。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>makefile 编写问题记录</title>
   <link href="http://tinyfisher.github.com/c/2012/11/23/makefile"/>
   <updated>2012-11-23T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/c/2012/11/23/makefile</id>
   <content type="html">&lt;p&gt;最近写了个小程序，用到了&lt;code&gt;pow()&lt;/code&gt;函数，我们都知道需要添加头文件&lt;code&gt;&amp;lt;math.h&amp;gt;&lt;/code&gt;，以及在&lt;code&gt;gcc&lt;/code&gt;编译的侍侯加上&lt;code&gt;-lm&lt;/code&gt;选项，但是这个&lt;code&gt;-lm&lt;/code&gt;选项的位值也是有讲究的，我之前的makefile如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;solution:solution.o
     gcc  -lm solution.o  -o solution 
solution.o:solution.c
     gcc  -c  solution.c&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;报出错误：&lt;code&gt;undefined reference to pow&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;原因是&lt;code&gt;-lm&lt;/code&gt;的位置在&lt;code&gt;solution.o&lt;/code&gt;之前，所以编译器链接的时侯先去链接&lt;code&gt;lm&lt;/code&gt;库，之后无法解释&lt;code&gt;solution.o&lt;/code&gt;里的&lt;code&gt;pow&lt;/code&gt;函数&lt;/p&gt;

&lt;p&gt;所以正确的makefile如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;solution:solution.o
     gcc  solution.o  -o solution  -lm
solution.o:solution.c
     gcc  -c  solution.c&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>DP实例之01背包问题C语言实现</title>
   <link href="http://tinyfisher.github.com/algorithm/2012/11/02/bag"/>
   <updated>2012-11-02T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/algorithm/2012/11/02/bag</id>
   <content type="html">&lt;h4 id='id12'&gt;问题描述：&lt;/h4&gt;

&lt;p&gt;有N件物品和一个容量为V的背包。第i件物品的费用是&lt;code&gt;c[i]&lt;/code&gt;，价值是&lt;code&gt;w[i]&lt;/code&gt;。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。&lt;br /&gt;这是最基础的背包问题，特点是：每种物品仅有一件，可以选择放或不放。&lt;/p&gt;

&lt;p&gt;用子问题定义状态：即&lt;code&gt;f[i][v]&lt;/code&gt;表示前i件物品恰放入一个容量为v的背包可以获得的最大价值。则其状态转移方程便是：&lt;code&gt;f[i][v]&lt;/code&gt;=&lt;code&gt;max{f[i-1][v],f[i-1][v-c[i]]+w[i]}&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;用二维数组记录每个子问题的值，避免重复计算，行从0到N，列从0到V。&lt;code&gt;f[][0]=0,f[0][]=0&lt;/code&gt;;&lt;/p&gt;

&lt;p&gt;很容易算出01背包的时间和空间复杂度，&lt;code&gt;O(V*N)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;C语言代码实现如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int Bag()  
{  
    int i,j;  
    int num=4;      //有4个物品  
    int vol=10;     //背包容量为10  
    int w[5]={0,3,1,4,3}; //此处需要多添加一个首元素元素0，因为下面的循环从1开始，若不添加0，则i-1会出现数组越界  
    int v[5]={0,1,3,4,2};//此处需要多添加一个首元素元素0，因为下面的循环从1开始，若不添加0，则i-1会出现数组越界  
    int f[5][11]={0}; //用来保存结果 ，以上几个数组长度都比num，vol多一个  
    for(i=1;i&amp;lt;=num;i++)  //状态方程  
    {  
        for(j=1;j&amp;lt;=vol;j++)  
        {  
            if (w[j]&amp;gt;j)                            //如果第i个物品放不进背包  
                f[i][j]=f[i-1][j];  
            else if(f[i-1][j]&amp;gt;(f[i-1][j-w[i]]+v[i]))    //状态方程 取&amp;lt;span style=&amp;quot;font-size: 14px;&amp;quot;&amp;gt;max{f[i-1][v],f[i-1][v-c[i]]+w[i]}&amp;lt;/span&amp;gt;  
                f[i][j]=f[i-1][j];  
            else  
                f[i][j]=f[i-1][j-w[i]]+v[i];  
        }  
    }  
    return f[4][10];  
}  &lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>关于回调函数</title>
   <link href="http://tinyfisher.github.com/c/2012/10/07/callback"/>
   <updated>2012-10-07T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/c/2012/10/07/callback</id>
   <content type="html">&lt;h3 id='id10'&gt;关于回调函数，搜集了一些网上的说法：&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1.形象的例子：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;你饿了,想吃饭,就一会去问你妈一声&amp;#8221;开饭没有啊?&amp;#8221;这就正常函数调用. 但是今天你妈包饺子,花的时间比较长,你跑啊跑啊,就烦了.于是你给你妈说,我先出去玩会,开饭的时候打我手机.等过了一阵,你妈给你打电话说&amp;#8221;开饭啦,快回来吃饭吧!&amp;#8221;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;其中,你告诉你妈打手机找你,就是个你把回调函数句柄保存到你妈的动作.你妈打电话叫你,就是个回调过程.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.为什么使用回调函数&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;本质上都是“&lt;strong&gt;你想让别人的代码执行你的代码，而别人的代码你又不能动&lt;/strong&gt;”这种需求下产生的&lt;/p&gt;

&lt;p&gt;别人给你的不是源代码，是一个已经编译好的模块，并且不会给你源代码，那是商业机密，留给你一个接口，你把你要执行的代码以回调函数的形式交给这个接口，由别人编写的模块在需要的时候调用&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.怎么调用回调函数&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;使用回调函数实际上就是在调用某个函数（通常是API函数）时，将自己的一个函数（这个函数为回调函数）的地址作为参数传递给那个函数。而那个函数在需要的时候，利用传递的地址调用回调函数，这时你可以利用这个机会在回调函数中处理消息或完成一定的操作。至于如何定义回调函数，跟具体使用的API函数有关，一般在帮助中有说明回调函数的参数和返回值等。C++中一般要求在回调函数前加CALLBACK，这主要是说明该函数的调用方式。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>创新工场一面总结</title>
   <link href="http://tinyfisher.github.com/blog/2012/09/23/factory"/>
   <updated>2012-09-23T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/blog/2012/09/23/factory</id>
   <content type="html">&lt;p&gt;跟hr约好了9点去面试，早上7点半起来，觉得不出意外能赶到，结果堵车了，急得要死，还好邮件里有hr的联系方式，提前打个电话说明了情况，对方表示没有关系，这下放心了。到了创新工场是大概9:10，迟到了10分钟左右，然后被hr mm带到一个叫手舞的玻璃房里，里面坐着面试官gg，谈吐穿着都非常儒雅，气氛不算很紧张。&lt;br /&gt;首先自我介绍，然后挑一个项目介绍，扯了扯，面试官开始直奔主题，写代码，早闻创新工场的面试就是这个样子，开始进入正题：&lt;br /&gt;&lt;strong&gt;1.快排，时间复杂度，怎么避免最坏情况的出现&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;砍瓜切菜，至于优化在《算法导论》中看到过，partition的时候不是固定取末尾一个数，而是随机取，甚至可以随机取3个数，取这3个数的中位数作为key。面试官比较满意。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.一个整型无序数组，要求从中取三个数，要求：这三个数值递增，三个数在原数组中的下标值也递增，说思路&lt;/strong&gt;&lt;br /&gt;这题时间不够，没想出来。我的思路是：&lt;br /&gt;1.既然无序，那我排序试试看，结果发现如果排序势必会打乱下标的顺序，跟没排序其实没区别&lt;br /&gt;2.那么既然下标已经有序了，我就把所有符合下标递增的三元组找出来，看他们的值是否递增，面试官说：这个肯定可以，有没有优化的办法？&lt;br /&gt;卡住了，实在想不出来了，时间也到了，后来我就问面试官，这题怎么做，他告诉了我答案：&lt;br /&gt;举个例子：2,1,4,3,5&lt;br /&gt;面试官说我们只需要找到总共有多少个三元组，而不需要把他们找出来，充分利用数组下标已递增的特点，固定一个数，比如说4，那么以4为中值的三元组只需要从左边找到比4小的和右边找到比4大的即可。 哎，充分感觉智商不够用。不知道还能不能进二面&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;总结：基础要牢，排序神马的基本是送分题，但也要深入研究下各个排序的特点，时间复杂度，最差情况，优化等等；至于算法题，还是搞题海战术吧，我这种智商的实在想不出来&lt;/strong&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>分段和分页内存管理</title>
   <link href="http://tinyfisher.github.com/linux/2012/09/23/OS-memory"/>
   <updated>2012-09-23T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/linux/2012/09/23/OS-memory</id>
   <content type="html">&lt;h3 id='id5'&gt;&lt;strong&gt;两者描述&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;打个比方，比如说你去听课，带了一个纸质笔记本做笔记。笔记本有100张纸，课程有语文、数学、英语三门，对于这个笔记本的使用，为了便于以后复习方便，你可以有两种选择。&lt;/p&gt;

&lt;p&gt;第一种是，你从本子的第一张纸开始用，并且事先在本子上做划分：第2张到第30张纸记语文笔记，第31到60张纸记数学笔记，第61到100张纸记英语笔记，最后在第一张纸做个列表，记录着三门笔记各自的范围。这就是分段管理，第一张纸叫段表。&lt;/p&gt;

&lt;p&gt;第二种是，你从第二张纸开始做笔记，各种课的笔记是连在一起的：第2张纸是数学，第3张是语文，第4张英语……最后呢，你在第一张纸做了一个目录，记录着语文笔记在第3、7、14、15张纸……，数学笔记在第2、6、8、9、11……，英语笔记在第4、5、12……。这就是分页管理，第一张纸叫页表。你要复习哪一门课，就到页表里查寻相关的纸的编号，然后翻到那一页去复习&lt;/p&gt;

&lt;h3 id='id6'&gt;&lt;strong&gt;两者的优缺点：&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;在段式存储管理中，将程序的地址空间划分为若干段（segment），如代码段，数据段，堆栈段；这样每个进程有一个二维地址空间，相互独立，互不干扰。&lt;em&gt;段式管理的优点是：没有内碎片（因为段大小可变，改变段大小来消除内碎片）。但段换入换出时，会产生外碎片（比如4k的段换5k的段，会产生1k的外碎片）&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;在页式存储管理中，将程序的逻辑地址划分为固定大小的页（page），而物理内存划分为同样大小的页框，程序加载时，可以将任意一页放入内存中任意一个页框，这些页框不必连续，从而实现了离散分离。&lt;em&gt;页式存储管理的优点是：没有外碎片（因为页的大小固定），但会产生内碎片（一个页可能填充不满）&lt;/em&gt;&lt;/p&gt;

&lt;h3 id='id7'&gt;&lt;strong&gt;两者的不同点：&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;(1) 分页仅仅是由于系统管理的需要而不是用户的需要。段则是信息的逻辑单位，它含有一组其意义相对完整的信息。分段的目的是为了能更好地满足用户的需要。&lt;/p&gt;

&lt;p&gt;(2) 页的大小固定且由系统决定，由系统把逻辑地址划分为页号和页内地址两部分，是由机器硬件实现的，因而在系统中只能有一种大小的页面；而段的长度却不固定，决定于用户所编写的程序，通常由编译程序在对源程序进行编译时，根据信息的性质来划分。&lt;/p&gt;

&lt;p&gt;(3) 分页的作业地址空间是一维的，即单一的线性地址空间，程序员只需利用一个记忆符，即可表示一个地址；而分段的作业地址空间则是二维的，程序员在标识一个地址时，既需给出段名，又需给出段内地址。&lt;/p&gt;

&lt;h3 id='id8'&gt;&lt;strong&gt;两者结合——段页式存储管理：&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;1．基本思想：&lt;/p&gt;

&lt;p&gt;分页系统能有效地提高内存的利用率，而分段系统能反映程序的逻辑结构，便于段的共享与保护，将分页与分段两种存储方式结合起来，就形成了段页式存储管理方式。&lt;/p&gt;

&lt;p&gt;在段页式存储管理系统中，作业的地址空间首先被分成若干个逻辑分段，每段都有自己的段号，然后再将每段分成若干个大小相等的页。对于主存空间也分成大小相等的页，主存的分配以页为单位。&lt;/p&gt;

&lt;p&gt;段页式系统中，作业的地址结构包含三部分的内容：段号，页号，页内位移量&lt;/p&gt;

&lt;p&gt;程序员按照分段系统的地址结构将地址分为段号与段内位移量，地址变换机构将段内位移量分解为页号和页内位移量。&lt;/p&gt;

&lt;p&gt;为实现段页式存储管理，系统应为每个进程设置一个段表，包括每段的段号，该段的页表始址和页表长度。每个段有自己的页表，记录段中的每一页的页号和存放在主存中的物理块号。&lt;/p&gt;

&lt;p&gt;2．地址变换的过程：&lt;/p&gt;

&lt;p&gt;（1）程序执行时，从PCB中取出段表始址和段表长度，装入段表寄存器。&lt;/p&gt;

&lt;p&gt;（2）由地址变换机构将逻辑地址自动分成段号、页号和页内地址。&lt;/p&gt;

&lt;p&gt;（3）将段号与段表长度进行比较，若段号大于或等于段表长度，则表示本次访问的地址已超越进程的地址空间，产生越界中断。&lt;/p&gt;

&lt;p&gt;（4）将段表始址与段号和段表项长度的乘积相加，便得到该段表项在段表中的位置。&lt;/p&gt;

&lt;p&gt;（5）取出段描述子得到该段的页表始址和页表长度。&lt;/p&gt;

&lt;p&gt;（6）将页号与页表长度进行比较，若页号大于或等于页表长度，则表示本次访问的地址已超越进程的地址空间，产生越界中断。&lt;/p&gt;

&lt;p&gt;（7）将页表始址与页号和页表项长度的乘积相加，便得到该页表项在页表中的位置。&lt;/p&gt;

&lt;p&gt;（8）取出页描述子得到该页的物理块号。&lt;/p&gt;

&lt;p&gt;（9）对该页的存取控制进行检查。&lt;/p&gt;

&lt;p&gt;（10）将物理块号送入物理地址寄存器中，再将有效地址寄存器中的页内地址直接送入物理地址寄存器的块内地址字段中，拼接得到实际的物理地址。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>vim的备份和还原</title>
   <link href="http://tinyfisher.github.com/vim/2012/09/01/vim"/>
   <updated>2012-09-01T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/vim/2012/09/01/vim</id>
   <content type="html">&lt;p&gt;vim是编辑神器，配置成IDE风格，用起来十分顺手，但是配置过程比较麻烦，前几天配置完了，重做系统还需要再配一遍吗，答案是否定的，如何还原vim环境呢？&lt;/p&gt;

&lt;p&gt;我的实验环境：&lt;code&gt;ubuntu10.04.2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step0&lt;/strong&gt;:安装vim：&lt;code&gt;sudo apt-get install vim&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step1:&lt;/strong&gt;备份文件：1.文件夹：&lt;code&gt;/.vim&lt;/code&gt; 2.配置文件：&lt;code&gt;/etc/vimrc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step2:&lt;/strong&gt;&lt;code&gt;sudo apt-get install exuberant-ctags&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step3:&lt;/strong&gt;复制刚才备份的文件到相应的目录下，并修改权限，简单暴力的777权限&lt;/p&gt;

&lt;p&gt;ok，还原成功！&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>根据二叉树的先序和中序遍历还原二叉树</title>
   <link href="http://tinyfisher.github.com/btree/2012/08/26/btree-back"/>
   <updated>2012-08-26T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/btree/2012/08/26/btree-back</id>
   <content type="html">&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;stdlib.h&amp;gt;
typedef struct node
{
	int value;
	struct node *left;
	struct node *right;
}Node,*pNode;

/*
 *根据二叉树的先序遍历和中序遍历，还原二叉树
 *先序：1,2,4,7,3,5,6,8;中序：4,7,2,1,5,3,8,6
*/

pNode BuildTree(int pre[],int mid[],int len)
{
	if(len&amp;lt;=0)
	{
		return NULL;
	}
	pNode root=(pNode)malloc(sizeof(Node));
	root-&amp;gt;value=pre[0];                    //先序的第一个节点一定是根节点
	int left_len=0;
	int right_len=0;
	int root_value=pre[0];
	int i=0;
	while(mid[i]!=root_value)              //获取左子树长度
	{
		i++;
		left_len++;
	}
	right_len=len-left_len-1;              //获取右子树长度
	//printf(&amp;quot;left_len is %d\n&amp;quot;,left_len);
	//printf(&amp;quot;right_len is %d\n&amp;quot;,right_len);
	root-&amp;gt;left=BuildTree(pre+1,mid,left_len);     //递归还原左子树
	root-&amp;gt;right=BuildTree(pre+1+left_len,mid+1+left_len,right_len);  //递归还原右子树
	return root;
}&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>获取二叉树叶子数、高度及左右子树交换</title>
   <link href="http://tinyfisher.github.com/btree/2012/08/21/btree-getinfo"/>
   <updated>2012-08-21T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/btree/2012/08/21/btree-getinfo</id>
   <content type="html">&lt;p&gt;二叉树的一些操作具有天然的递归性，本文实现了获取二叉树的叶子总数、获取二叉树高度以及交换二叉树的左右子树，代码均已编译通过。&lt;/p&gt;

&lt;p&gt;1.获取二叉树叶子总数：左子树叶子总数+右子树叶子总数&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typedef struct BNode
{
    char value;  //类型假设为char
    struct BNode *left;
    struct BNode *right;

} Node,*pNode,**ppNode;
int GetLeafeNum(pNode root)
{
    if(root==NULL)  //空节点叶子数为0
    {
        return 0;
    }
    else if(root-&amp;gt;left==NULL&amp;amp;&amp;amp;root-&amp;gt;right==NULL)
    {
       return 1;
    }
    return GetLeafeNum(root-&amp;gt;left)+GetLeafeNum(root-&amp;gt;right);
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.交换左右子树&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void swap_tree(pNode root)
{
    if(root==NULL)
        return;
    else
    {
        pNode temp=root-&amp;gt;left;
        root-&amp;gt;left=root-&amp;gt;right;
        root-&amp;gt;right=temp;
        swap_tree(root-&amp;gt;left);
        swap_tree(root-&amp;gt;right);
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取二叉树高度：左右子树高度较大的+1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int GetHeight(pNode root)
{
    if(root==NULL)
    {
        return 0;
    }
    //max(left,right)+1; 左右子树最高高度+1
    return (GetHeight(root-&amp;gt;left)&amp;gt;=GetHeight(root-&amp;gt;right)?(GetHeight(root-&amp;gt;left)+1):(GetHeight(root-&amp;gt;right)+1));
}&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>二叉树创建和遍历</title>
   <link href="http://tinyfisher.github.com/btree/2012/08/03/btree-create-traversal"/>
   <updated>2012-08-03T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/btree/2012/08/03/btree-create-traversal</id>
   <content type="html">&lt;p&gt;二叉树的概念、性质等就不多介绍了，这里用C语言实现了二叉树的建立（1.用户输入，2.给数组参数），前中后序遍历和按层遍历。&lt;/p&gt;

&lt;p&gt;1.二叉树的建立&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typedef struct BNode
{
    char value;  //类型假设为char
    struct BNode *left;
    struct BNode *right;

} Node,*pNode,**ppNode;

pNode CreateBTree()  //通过输入建立二叉树，&amp;#39;@&amp;#39;表示空节点，先序顺序，空节点必须输入
{
    char ch;
    pNode q;
    scanf(&amp;quot; %c&amp;quot;,&amp;amp;ch);  //%c前面的空格 用来清空缓冲区
   // fflush(stdin);  //或者这样清空缓冲区
    if(ch==&amp;#39;@&amp;#39;)
    {
        return NULL;
    }
    else
    {
        q=(pNode)malloc(sizeof(Node));
        if(q==NULL)
        {
            printf(&amp;quot;malloc error\n&amp;quot;);
            return NULL;
        }
        q-&amp;gt;value=ch;
        q-&amp;gt;left=CreateBTree();
        q-&amp;gt;right=CreateBTree();
        return q;
    }

}

pNode CreateBTree_from_array(char a[],int index,int len) //根据数组创建二叉树双链表
{
	if(index&amp;gt;=len) //叶子节点
		return NULL;
	else
	{
	pNode root=(pNode)malloc(sizeof(Node));
	if(root==NULL)
	{
		printf(&amp;quot;malloc error\n&amp;quot;);
		return NULL;
	}
	root-&amp;gt;value=a[index];
	root-&amp;gt;left=CreateBTree_from_array(a,2*index+1,len);
	root-&amp;gt;right=CreateBTree_from_array(a,2*index+2,len);
	return root;
	}
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.二叉树的前中后序遍历：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void preorder(pNode root)  //先序遍历
{
    if(root==NULL)
        return;
    else
    {
        printf(&amp;quot;%c&amp;quot;,root-&amp;gt;value);
        preorder(root-&amp;gt;left);
        preorder(root-&amp;gt;right);
    }
}

void midorder(pNode root)  //中序遍历
{
    if(root==NULL)
        return;
    else
    {
        midorder(root-&amp;gt;left);
        printf(&amp;quot;%c&amp;quot;,root-&amp;gt;value);
        midorder(root-&amp;gt;right);
    }
}

void postorder(pNode root)//后序遍历
{
    if(root==NULL)
        return;
    else
    {
        postorder(root-&amp;gt;left);
        postorder(root-&amp;gt;right);
        printf(&amp;quot;%c&amp;quot;,root-&amp;gt;value);
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.二叉树按层遍历&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*
    二叉树按层遍历，借助队列，构建一个队列专门用来储存二叉树节点指针，先把根节点入队，假设是A，对A元素进行访问，
    然后对A的左右孩子依次入队，假设B,C。A出队列，再是对B进行访问，同样将B的左右孩子入队列，B出对列······
    重复以上，直到队列为空。
*/
#define LEN 10
typedef struct queue  //队列，包含pNode数组，首尾index
{
    pNode data[LEN];
    int front;
    int rear;
}BTreeQueue,*pBTreeQueue;

void TransLevel(pNode root)
{
    pBTreeQueue pqueue=(pBTreeQueue)malloc(sizeof(BTreeQueue));
    pNode proot=root;
    pqueue-&amp;gt;front=0;
    pqueue-&amp;gt;rear=0;
    if(proot==NULL)
    {
        printf(&amp;quot;tree is null&amp;quot;);
        return;
    }
    else
    {
        printf(&amp;quot;%c&amp;quot;,proot-&amp;gt;value);
        pqueue-&amp;gt;data[pqueue-&amp;gt;front]=proot;  //根节点入队；
        (pqueue-&amp;gt;rear)++;
        while((pqueue-&amp;gt;front)&amp;lt;(pqueue-&amp;gt;rear))
        {
            proot=pqueue-&amp;gt;data[pqueue-&amp;gt;front];
            (pqueue-&amp;gt;front)++;  //队列首元素出列，保存为proot
            if(proot-&amp;gt;left!=NULL)
            {
                printf(&amp;quot;%c&amp;quot;,proot-&amp;gt;left-&amp;gt;value);
                pqueue-&amp;gt;data[pqueue-&amp;gt;rear]=proot-&amp;gt;left; //左子节点入队
                (pqueue-&amp;gt;rear)++;
            }
            if(proot-&amp;gt;right!=NULL)
            {
                printf(&amp;quot;%c&amp;quot;,proot-&amp;gt;right-&amp;gt;value);
                pqueue-&amp;gt;data[pqueue-&amp;gt;rear]=proot-&amp;gt;right; //右子节点入队
                (pqueue-&amp;gt;rear)++;
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>双链表操作大全</title>
   <link href="http://tinyfisher.github.com/link/2012/08/01/doublelink"/>
   <updated>2012-08-01T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/link/2012/08/01/doublelink</id>
   <content type="html">&lt;p&gt;双向链表的操作和单链表很像，主要包括创建，删除，插入；只要注意下指针的操作即可，废话不多说，直接上代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typedef struct dnode
{
    int num;
    struct dnode *pre;
    struct dnode *next;
}Dnode,*pDnode;

pDnode Create()  //用户输入创建，-1表示结束
{
    pDnode head=(pDnode)malloc(sizeof(Dnode));
    pDnode p=head;
    int a;
    printf(&amp;quot;please input :\n&amp;quot;);
    scanf(&amp;quot;%d&amp;quot;,&amp;amp;a);
    while(a!=-1)
    {
        pDnode q=(pDnode)malloc(sizeof(Dnode));
        q-&amp;gt;num=a;
        p-&amp;gt;next=q;
        q-&amp;gt;pre=p;
        p=q;
        scanf(&amp;quot;%d&amp;quot;,&amp;amp;a);
    }
    p-&amp;gt;next=NULL;
    head=head-&amp;gt;next;
    head-&amp;gt;pre=NULL;
    return head;
}

pDnode CreateFromArray(int a[],int len)    //根据数组创建
{
    pDnode head=(pDnode)malloc(sizeof(Dnode));
    pDnode p=head;
    int i=0;
    while(i&amp;lt;len)
    {
        pDnode q=(pDnode)malloc(sizeof(Dnode));
        q-&amp;gt;num=a[i];
        p-&amp;gt;next=q;
        q-&amp;gt;pre=p;
        p=q;
        i++;
    }
    p-&amp;gt;next=NULL;
    head=head-&amp;gt;next;
    head-&amp;gt;pre=NULL;
    return head;
}

pDnode del(pDnode head, int key)   //删除
{
    pDnode q1=head;
    pDnode q2=head;
    if(head==NULL)
        return NULL;
    if(head-&amp;gt;num==key)
    {
        head=head-&amp;gt;next;
        head-&amp;gt;pre=NULL;
        free(q1);
        return head;
    }
    while(q1-&amp;gt;num!=key&amp;amp;&amp;amp;q1-&amp;gt;next!=NULL)
    {
        q2=q1;
        q1=q1-&amp;gt;next;
    }
    if(q1-&amp;gt;num==key&amp;amp;&amp;amp;q1-&amp;gt;next==NULL)
    {
        q2-&amp;gt;next=NULL;
        free(q1);
    }
    else if(q1-&amp;gt;num==key&amp;amp;&amp;amp;q1-&amp;gt;next!=NULL)
    {
        q2-&amp;gt;next=q1-&amp;gt;next;
        q1-&amp;gt;next-&amp;gt;pre=q2;
        free(q1);
    }
    else
    {
        printf(&amp;quot;not found\n&amp;quot;);
    }
    return head;
}

pDnode insert(pDnode head,int key)    // 插入
{
    pDnode s=(pDnode)malloc(sizeof(Dnode));
    s-&amp;gt;num=key;
    pDnode p=head;
    pDnode q=head;
    while(p-&amp;gt;num&amp;lt;key&amp;amp;&amp;amp;p-&amp;gt;next!=NULL)
    {
        p=p-&amp;gt;next;
    }
    if(p==head)
    {
        s-&amp;gt;next=head;
        head-&amp;gt;pre=s;
        head=s;
        head-&amp;gt;pre=NULL;
    }
    else if(p-&amp;gt;next==NULL&amp;amp;&amp;amp;p-&amp;gt;num&amp;lt;key)
    {
        p-&amp;gt;next=s;
        s-&amp;gt;pre=p;
        s-&amp;gt;next=NULL;
    }
    else
    {
        q=p-&amp;gt;next;
        p-&amp;gt;next=s;
        s-&amp;gt;next=q;
        s-&amp;gt;pre=p;
        q-&amp;gt;pre=s;
    }
    return head;
}

void print_from_head(pDnode head)  //打印
{
    while(head-&amp;gt;next!=NULL)
    {
        printf(&amp;quot;%d&amp;quot;,head-&amp;gt;num);
        head=head-&amp;gt;next;
    }
    printf(&amp;quot;%d&amp;quot;,head-&amp;gt;num);
    printf(&amp;quot;\n&amp;quot;);
}

void print_from_tail(pDnode head)
{
    while(head-&amp;gt;next!=NULL)
        head=head-&amp;gt;next;
    while(head-&amp;gt;pre!=NULL)
    {
        printf(&amp;quot;%d&amp;quot;,head-&amp;gt;num);
        head=head-&amp;gt;pre;
    }
    printf(&amp;quot;%d&amp;quot;,head-&amp;gt;num);
    printf(&amp;quot;\n&amp;quot;);
}&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>单链表操作大全</title>
   <link href="http://tinyfisher.github.com/link/2012/07/22/link"/>
   <updated>2012-07-22T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/link/2012/07/22/link</id>
   <content type="html">&lt;p&gt;单链表的操作一般包括：建立，删除节点，插入节点，链表反转&lt;/p&gt;

&lt;p&gt;1.单链表建立，包括从终端输入和由数组转换而来两种：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typedef struct node
{
    int num;
    struct node * next;
}Node,*pNode;

pNode CreateLink()
{
    pNode head=(pNode)malloc(sizeof(Node));
    pNode p=head;
    int a;
    printf(&amp;quot;please input:\n&amp;quot;);
    scanf(&amp;quot;%d&amp;quot;,&amp;amp;a);
    while(a!=-1)
    {
        pNode q=(pNode)malloc(sizeof(Node));
        q-&amp;gt;num=a;
        p-&amp;gt;next=q;
        p=q;
        scanf(&amp;quot;%d&amp;quot;,&amp;amp;a);
    }
    p-&amp;gt;next=NULL;
    head=head-&amp;gt;next;
    return head;
}

pNode CreateLinkFromArray(int a[],int len)
{
    pNode head=(pNode)malloc(sizeof(Node));
    pNode p=head;
    int i=0;
    while(i&amp;lt;len)
    {
        pNode q=(pNode)malloc(sizeof(Node));
        q-&amp;gt;num=a[i];
        p-&amp;gt;next=q;
        p=q;
        i++;
    }
    p-&amp;gt;next=NULL;
    head=head-&amp;gt;next;
    return head;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.单链表删除节点，考虑删除头结点，尾节点和中间节点：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pNode del(pNode head,int key)
{
pNode p=head;
pNode q=head;
if(p==NULL) &amp;amp;nbsp; //若链表为空
{
    return NULL;
}
if(p-&amp;gt;num==key) //删除头指针
{
    head=head-&amp;gt;next;
    free(p);    // 释放删除节点空间
    return head;
}
while(p-&amp;gt;num!=key&amp;amp;&amp;amp;p-&amp;gt;next!=NULL) //遍历链表直到最后一个元素 寻找key，若有删掉
{
    q=p;
    p=p-&amp;gt;next;
}
if(p-&amp;gt;next==NULL&amp;amp;&amp;amp;p-&amp;gt;num==key) //删除尾元素
{
    q-&amp;gt;next=NULL;
    free(p);
}
else if(p-&amp;gt;next!=NULL) &amp;amp;nbsp;//删除中间元素
{
    q-&amp;gt;next=p-&amp;gt;next;
    free(p);
}
else
{
    printf(&amp;quot;not found\n&amp;quot;);
}
return head;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.单链表插入元素，考虑插入头结点，尾节点和中间节点&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pNode insert(pNode head,int value)
{
    pNode s=(pNode)malloc(sizeof(Node));
    s-&amp;gt;num=value;
    pNode p=head;
    pNode q=head;
    if(head==NULL) //链表为空
    {
        s-&amp;gt;next=NULL;
        return s;
    }
    while(p-&amp;gt;num&amp;lt;value&amp;amp;&amp;amp;p-&amp;gt;next!=NULL)
    {
        q=p;
        p=p-&amp;gt;next;
    }
    if(p-&amp;gt;next==NULL&amp;amp;&amp;amp;p-&amp;gt;num&amp;lt;value)  //插入尾节点
    {
        p-&amp;gt;next=s;
        s-&amp;gt;next=NULL;
        return head;
    }
    else if(p==head) //插入头结点
    {
        p=s;
        s-&amp;gt;next=q;
        return p;
    }
    else
    {
        q-&amp;gt;next=s;
        s-&amp;gt;next=p;
        return head;
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.单链表反转&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pNode reverse(pNode head)
{
    if(head==NULL)
    {
        return NULL;
    }
    if(head-&amp;gt;next==NULL)
    {
        return head;
    }
    pNode p1,p2,p3;
    p1=head;
    p2=head;
    while(p2-&amp;gt;next!=NULL)
    {
        p3=p2-&amp;gt;next;
        p2-&amp;gt;next=p1;
        p1=p2;
        p2=p3;
    }
    p2-&amp;gt;next=p1;
    head-&amp;gt;next=NULL;
    head=p2;
    return head;
}&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>二分查找C语言实现</title>
   <link href="http://tinyfisher.github.com/algorithm/2012/06/22/bin-search"/>
   <updated>2012-06-22T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/algorithm/2012/06/22/bin-search</id>
   <content type="html">&lt;p&gt;据说90%的程序员都无法正确的写出二分搜索，试了下果然如此，需要注意的地方挺多（边界条件），所以讲递归与非递归的写法记录下来，以便于复习&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int binary_search(int array[],int n,int key)  //非递归
{
    int low=0;
    int high=n-1;
    while(low&amp;lt;=high)    //请注意=
    {
        if(array[low+(high-low)/2]==key)
        {
            return low+(high-low)/2;   //请注意 low+
        }
        else if(array[low+(high-low)/2]&amp;gt;key)
        {
            high=low+(high-low)/2 -1;    //请注意-1
        }
        else
        {
            low=low+(high-low)/2 +1 ;  //请注意+1
        }
    }
    return -1;
}
int binary_search(int array[],int low,int high,int key)  //递归 ,需要参数 low high
{
    if(low&amp;lt;=high)
    {
        if(key==array[low+(high-low)/2])
            return (low+(high-low)/2);
        else if(key&amp;gt;array[low+(high-low)/2])
            return binary_search(array,low+(high-low)/2+1,high,key);
        else
            return binary_search(array,low,low+(high-low)/2-1,key);
    }
    else
    {
        return -1;
    }
}&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>归并排序C语言实现</title>
   <link href="http://tinyfisher.github.com/algorithm/2012/06/03/merge-sort"/>
   <updated>2012-06-03T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/algorithm/2012/06/03/merge-sort</id>
   <content type="html">&lt;p&gt;话不多说，直接上代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void swap(int *a,int *b)
{
    int temp=*a;
    *a=*b;
    *b=temp;
}
void merge_array(int a[],int low,int mid,int high,int result[])
{
    int i,j,k;
    i=low;
    j=mid+1;
    k=0;
    while(i&amp;lt;=mid&amp;amp;&amp;amp;j&amp;lt;=high)
    {
        if(a[i]&amp;lt;a[j])
        {
            result[k]=a[i];
            i++;
            k++;
        }
        else
        {
            result[k]=a[j];
            k++;
            j++;
        }
    }
    while(i&amp;lt;=mid)
    {
        result[k]=a[i];
        i++;
        k++;
    }
    while(j&amp;lt;=high)
    {
        result[k]=a[j];
        j++;
        k++;
    }
    for(i=0;i&amp;lt;k;i++)    //注意 需要这一步
    {
        a[low+i]=result[i];  //low+i
    }
}&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>快速排序C语言实现</title>
   <link href="http://tinyfisher.github.com/algorithm/2012/05/24/quick-sort"/>
   <updated>2012-05-24T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/algorithm/2012/05/24/quick-sort</id>
   <content type="html">&lt;p&gt;快速排序，经典必须掌握&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void swap(int *a,int *b)
{
    int temp=*a;
    *a=*b;
    *b=temp;
}
int partition (int input[],int low,int high)
{
    int position=low-1;
    int key=input[high];
    while(low&amp;lt;high)
    {
        if(input[low]&amp;lt;key)
        {
            position++;
            swap(&amp;amp;input[position],&amp;amp;input[low]);
        }
        low++;
    }
    position++;
    swap(&amp;amp;input[position],&amp;amp;input[high]);
    return position;

}
void q_sort(int a[],int low,int high)
{
    if(low &amp;lt; high)               //不是while，因为是递归调用
    {
        int p;
        p=partition(a,low,high);
        q_sort(a,low,p-1);
        q_sort(a,p+1,high);
     }
}&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>堆排序C语言实现</title>
   <link href="http://tinyfisher.github.com/algorithm/2012/05/15/heap-sort"/>
   <updated>2012-05-15T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/algorithm/2012/05/15/heap-sort</id>
   <content type="html">&lt;p&gt;堆的概念这里不再描述，这里主要实现堆排序，堆排序主要分为两步：&lt;br /&gt;1.堆化数组（最小堆）；&lt;br /&gt;2.交换首尾元素，（则最后一个元素为最小），调整前n-1个元素，使前n-1个元素仍为为最小堆，循环，直到还剩一个元素；这样排序下来，数组为倒序。&lt;br /&gt;代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void swap(int *a,int *b)
{
    int temp=*a;
    *a=*b;
    *b=temp;
}
void FixdownMinHeap(int a[],int index,int len)   //向下调整堆
{
    int father_index=index;
    int left_child_index=2*father_index+1;
    int right_child_index=2*father_index+2;
    int min=0;
    int min_index=0;
    while(left_child_index&amp;lt;len)   //重要  判断father_index不是叶子节点  
    {

        if(a[left_child_index]&amp;gt;a[right_child_index]&amp;amp;&amp;amp;right_child_index&amp;lt;len) //右节点存在且最小
        {
            min=a[right_child_index];
            min_index=right_child_index;
        }
        else
        {
            min=a[left_child_index];
            min_index=left_child_index;
        }

        if(a[father_index]&amp;gt;min)
        {
            swap(&amp;amp;a[father_index],&amp;amp;a[min_index]);
        }

        father_index=left_child_index;
        left_child_index=2*father_index+1;
        right_child_index=2*father_index+2;
    }
}
void createMinHeap(int a[],int n)//堆化数组
{
    int i=(n-1-1)/2; //因为n是数组长度，（n-1-1）/2表示最大父节点index
    while(i&amp;gt;=0)
    {
        FixdownMinHeap(a,i,n);
        i--;
    }
}
void MinHeapSort(int a[],int n)
{
    createMinHeap(a,n);
    int i=0;
    for(i=n-1;i&amp;gt;0;i--)
    {
        swap(&amp;amp;a[i],&amp;amp;a[0]);  //交换首尾元素
        FixdownMinHeap(a,0,i);  //调整堆
    }
}&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>冒泡排序C语言实现</title>
   <link href="http://tinyfisher.github.com/algorithm/2012/05/02/bubble-sort"/>
   <updated>2012-05-02T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/algorithm/2012/05/02/bubble-sort</id>
   <content type="html">&lt;p&gt;最近打算将各种常用的算法（排序，查找等）复习一遍，都是用C语言实现，代码均在codeblocks下编译通过。&lt;br /&gt;第一篇：冒泡排序&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void swap(int *a,int *b)
{
    int temp=*a;
    *a=*b;
    *b=temp;
}

void bubble_sort(int input[],int length)
{
    int i,j,flag=1;
    for(i=0;i&amp;lt;length&amp;amp;&amp;amp;flag;i++)
    {
        flag=0;             //若flag为0 表示这一趟没有交换，则已经排序完成，无需再扫描，即使扫描 也不会发生交换
        for(j=length-1;j&amp;gt;i;j--)
        {
            if(input[j]&amp;lt;input[j-1])
            {
                 swap(&amp;amp;input[j],&amp;amp;input[j-1]);
                 flag=1;
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>github 搭建博客</title>
   <link href="http://tinyfisher.github.com/blog/2012/04/01/blog"/>
   <updated>2012-04-01T00:00:00+08:00</updated>
   <id>http://tinyfisher.github.com/blog/2012/04/01/blog</id>
   <content type="html">&lt;h2 id='github'&gt;注册github帐号&lt;/h2&gt;

&lt;p&gt;在github上注册帐号,如果你的帐号为tinyfisher 创建tinyfisher.github.com这个项目.&lt;/p&gt;

&lt;h2 id='jekyll'&gt;安装jekyll&lt;/h2&gt;

&lt;p&gt;安装jekyll到github上, 这里我用的是 Jekyll-Bootstrap&lt;br /&gt;执行以下命令 &lt;pre class='prettyprint linenums lang-clj'&gt;
git clone https://github.com/plusjade/jekyll-bootstrap.git tinyfisher.github.com
cd tinyfisher.github.com
git remote set-url origin git@github.com:tinyfisher/tinyfisher.github.com.git
git push origin master
&lt;/pre&gt;&lt;/p&gt;

&lt;h2 id='jekyll'&gt;配置jekyll&lt;/h2&gt;

&lt;p&gt;修改 &lt;code&gt;_config.yml&lt;/code&gt;文件 将着一些基础信息配置成你的个性化设置&lt;/p&gt;

&lt;h3 id='id1'&gt;配置首页&lt;/h3&gt;

&lt;p&gt;jekyllbootstrap默认的首页是&lt;code&gt;index.md&lt;/code&gt;&lt;br /&gt;但是如果需要分页效果的话需要使用的是&lt;code&gt;index.html&lt;/code&gt;, 并且修改&lt;code&gt;_config.yml&lt;/code&gt;, 添加一个配置项&lt;code&gt;paginate: 5&lt;/code&gt;&lt;br /&gt;详细的配置可以clone我的&lt;a href='https://github.com/tinyfisher/tinyfisher.github.com'&gt;博客项目&lt;/a&gt;进行查看&lt;/p&gt;

&lt;h2 id='id2'&gt;添加文章&lt;/h2&gt;

&lt;p&gt;在&lt;code&gt;_posts&lt;/code&gt;目录下新建一个&lt;code&gt;markdown(*.md)&lt;/code&gt;文件, 文件命名规范是&lt;code&gt;yyyy-mm-dd-url&lt;/code&gt;, 例如该文章的文件为&lt;code&gt;2012-05-18-github-blog-jekyll-bootstrap.md&lt;/code&gt;&lt;br /&gt;得到的访问路径却是&lt;a href=''&gt;/javascript/2012/05/18/github-blog-jekyll-bootstrap/&lt;/a&gt;其中/javascript是在markdown文件中配置的.&lt;/p&gt;

&lt;p&gt;markdown文件头需要几个配置, 以下是该文章的头配置&lt;/p&gt;
&lt;pre class='prettyprint linenums lang-clj'&gt;
---
layout: post
title: 在github上搭建博客
category: javascript
tags: [github, bootstrap, jekyll, javascript]
---
&lt;/pre&gt;
&lt;p&gt;每个markdown必须在头部加上这段. 然后下面直接写markdown代码就行了.&lt;/p&gt;

&lt;h2 id='id3'&gt;遇到的问题&lt;/h2&gt;

&lt;h3 id='1gbk'&gt;1.打开浏览器出现GBK编码错误&lt;/h3&gt;

&lt;p&gt;打开Git Bash后运行 jekyll server在本地测试时出现一下错误&lt;br /&gt;&lt;pre&gt;
Liquid error: invalid byte sequence in GBK
&lt;/pre&gt; 这个问题是在 Windows 下出现的，英文博文没问题，中文博文就会报错，原因是你所使用的控制台并不能工作 UTF-8。&lt;/p&gt;

&lt;p&gt;临时方案：在执行 jekyll 命令前，将当前控制台的代码格式转为 UTF-8: &lt;pre&gt;
$export LC_ALL=en_US.UTF-8
$export LANG=en_US.UTF-8
$jekyll --server --auto
&lt;/pre&gt; 永久方案：添加两对用户自定义的环境变量，&lt;code&gt;LC_ALL=en_US.UTF-8&lt;/code&gt; 和 &lt;code&gt;LANG=en_US.UTF-8&lt;/code&gt;在git安装目录&lt;code&gt;Git\etc\profile&lt;/code&gt;文件里加入以下内容 &lt;pre&gt;
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;参考文献：&lt;a href='http://jekyllbootstrap.com/'&gt;3min搭建jekyll博客&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 
</feed>